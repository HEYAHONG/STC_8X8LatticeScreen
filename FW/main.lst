                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Font5x7
                                     12 	.globl _main
                                     13 	.globl _Clk_In_Interrupt
                                     14 	.globl _Clk_In_Init
                                     15 	.globl _Uart_Interrupt
                                     16 	.globl _Uart_Send
                                     17 	.globl _Uart_Init
                                     18 	.globl _systick_interrupt
                                     19 	.globl _systick_init
                                     20 	.globl _LS_DisplayOneCol
                                     21 	.globl _LS_595_DataOut
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _F1
                                     29 	.globl _P
                                     30 	.globl _PS
                                     31 	.globl _PT1
                                     32 	.globl _PX1
                                     33 	.globl _PT0
                                     34 	.globl _PX0
                                     35 	.globl _RD
                                     36 	.globl _WR
                                     37 	.globl _T1
                                     38 	.globl _T0
                                     39 	.globl _INT1
                                     40 	.globl _INT0
                                     41 	.globl _TXD
                                     42 	.globl _RXD
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _EA
                                     52 	.globl _ES
                                     53 	.globl _ET1
                                     54 	.globl _EX1
                                     55 	.globl _ET0
                                     56 	.globl _EX0
                                     57 	.globl _P2_7
                                     58 	.globl _P2_6
                                     59 	.globl _P2_5
                                     60 	.globl _P2_4
                                     61 	.globl _P2_3
                                     62 	.globl _P2_2
                                     63 	.globl _P2_1
                                     64 	.globl _P2_0
                                     65 	.globl _SM0
                                     66 	.globl _SM1
                                     67 	.globl _SM2
                                     68 	.globl _REN
                                     69 	.globl _TB8
                                     70 	.globl _RB8
                                     71 	.globl _TI
                                     72 	.globl _RI
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _TF1
                                     82 	.globl _TR1
                                     83 	.globl _TF0
                                     84 	.globl _TR0
                                     85 	.globl _IE1
                                     86 	.globl _IT1
                                     87 	.globl _IE0
                                     88 	.globl _IT0
                                     89 	.globl _P0_7
                                     90 	.globl _P0_6
                                     91 	.globl _P0_5
                                     92 	.globl _P0_4
                                     93 	.globl _P0_3
                                     94 	.globl _P0_2
                                     95 	.globl _P0_1
                                     96 	.globl _P0_0
                                     97 	.globl _B
                                     98 	.globl _ACC
                                     99 	.globl _PSW
                                    100 	.globl _IP
                                    101 	.globl _P3
                                    102 	.globl _IE
                                    103 	.globl _P2
                                    104 	.globl _SBUF
                                    105 	.globl _SCON
                                    106 	.globl _P1
                                    107 	.globl _TH1
                                    108 	.globl _TH0
                                    109 	.globl _TL1
                                    110 	.globl _TL0
                                    111 	.globl _TMOD
                                    112 	.globl _TCON
                                    113 	.globl _PCON
                                    114 	.globl _DPH
                                    115 	.globl _DPL
                                    116 	.globl _SP
                                    117 	.globl _P0
                                    118 	.globl _Tx_Busy
                                    119 	.globl _Last_Receive_Tick
                                    120 	.globl _Uart_Receive_Buff_Index
                                    121 	.globl _Uart_Receive_Buff
                                    122 	.globl _systick
                                    123 	.globl _LS_RAM
                                    124 	.globl _On_Uart_Buff_Full_PARM_2
                                    125 	.globl _On_Uart_Idle_PARM_2
                                    126 	.globl _LS_DisplayOneCol_PARM_2
                                    127 	.globl _LS_595_DataOut_PARM_2
                                    128 	.globl _LS_Init
                                    129 	.globl _LS_Deinit
                                    130 	.globl _LS_Refresh
                                    131 	.globl _LS_Show_Char_Font5x7
                                    132 	.globl _On_SysTick_Timer
                                    133 	.globl _On_Uart_Idle
                                    134 	.globl _On_Uart_Buff_Full
                                    135 ;--------------------------------------------------------
                                    136 ; special function registers
                                    137 ;--------------------------------------------------------
                                    138 	.area RSEG    (ABS,DATA)
      000000                        139 	.org 0x0000
                           000080   140 G$P0$0_0$0 == 0x0080
                           000080   141 _P0	=	0x0080
                           000081   142 G$SP$0_0$0 == 0x0081
                           000081   143 _SP	=	0x0081
                           000082   144 G$DPL$0_0$0 == 0x0082
                           000082   145 _DPL	=	0x0082
                           000083   146 G$DPH$0_0$0 == 0x0083
                           000083   147 _DPH	=	0x0083
                           000087   148 G$PCON$0_0$0 == 0x0087
                           000087   149 _PCON	=	0x0087
                           000088   150 G$TCON$0_0$0 == 0x0088
                           000088   151 _TCON	=	0x0088
                           000089   152 G$TMOD$0_0$0 == 0x0089
                           000089   153 _TMOD	=	0x0089
                           00008A   154 G$TL0$0_0$0 == 0x008a
                           00008A   155 _TL0	=	0x008a
                           00008B   156 G$TL1$0_0$0 == 0x008b
                           00008B   157 _TL1	=	0x008b
                           00008C   158 G$TH0$0_0$0 == 0x008c
                           00008C   159 _TH0	=	0x008c
                           00008D   160 G$TH1$0_0$0 == 0x008d
                           00008D   161 _TH1	=	0x008d
                           000090   162 G$P1$0_0$0 == 0x0090
                           000090   163 _P1	=	0x0090
                           000098   164 G$SCON$0_0$0 == 0x0098
                           000098   165 _SCON	=	0x0098
                           000099   166 G$SBUF$0_0$0 == 0x0099
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 G$P2$0_0$0 == 0x00a0
                           0000A0   169 _P2	=	0x00a0
                           0000A8   170 G$IE$0_0$0 == 0x00a8
                           0000A8   171 _IE	=	0x00a8
                           0000B0   172 G$P3$0_0$0 == 0x00b0
                           0000B0   173 _P3	=	0x00b0
                           0000B8   174 G$IP$0_0$0 == 0x00b8
                           0000B8   175 _IP	=	0x00b8
                           0000D0   176 G$PSW$0_0$0 == 0x00d0
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 G$ACC$0_0$0 == 0x00e0
                           0000E0   179 _ACC	=	0x00e0
                           0000F0   180 G$B$0_0$0 == 0x00f0
                           0000F0   181 _B	=	0x00f0
                           000091   182 Lmain.LS_Init$P1M1$1_0$29 == 0x0091
                           000091   183 _LS_Init_P1M1_65536_29	=	0x0091
                           000092   184 Lmain.LS_Init$P1M0$1_0$29 == 0x0092
                           000092   185 _LS_Init_P1M0_65536_29	=	0x0092
                           000091   186 Lmain.LS_Deinit$P1M1$1_0$30 == 0x0091
                           000091   187 _LS_Deinit_P1M1_65536_30	=	0x0091
                           000092   188 Lmain.LS_Deinit$P1M0$1_0$30 == 0x0092
                           000092   189 _LS_Deinit_P1M0_65536_30	=	0x0092
                           00008E   190 Lmain.systick_init$AUXR$1_0$49 == 0x008e
                           00008E   191 _systick_init_AUXR_65536_49	=	0x008e
                           0000B1   192 Lmain.systick_init$P3M1$1_1$50 == 0x00b1
                           0000B1   193 _systick_init_P3M1_65537_50	=	0x00b1
                           0000B2   194 Lmain.systick_init$P3M0$1_1$50 == 0x00b2
                           0000B2   195 _systick_init_P3M0_65537_50	=	0x00b2
                           00008E   196 Lmain.Uart_Init$AUXR$1_0$55 == 0x008e
                           00008E   197 _Uart_Init_AUXR_65536_55	=	0x008e
                           0000D6   198 Lmain.Uart_Init$T2H$1_0$55 == 0x00d6
                           0000D6   199 _Uart_Init_T2H_65536_55	=	0x00d6
                           0000D7   200 Lmain.Uart_Init$T2L$1_0$55 == 0x00d7
                           0000D7   201 _Uart_Init_T2L_65536_55	=	0x00d7
                           0000A2   202 Lmain.Uart_Init$P_SW1$1_0$55 == 0x00a2
                           0000A2   203 _Uart_Init_P_SW1_65536_55	=	0x00a2
                           0000B1   204 Lmain.Clk_In_Init$P3M1$1_0$65 == 0x00b1
                           0000B1   205 _Clk_In_Init_P3M1_65536_65	=	0x00b1
                           0000B2   206 Lmain.Clk_In_Init$P3M0$1_0$65 == 0x00b2
                           0000B2   207 _Clk_In_Init_P3M0_65536_65	=	0x00b2
                                    208 ;--------------------------------------------------------
                                    209 ; special function bits
                                    210 ;--------------------------------------------------------
                                    211 	.area RSEG    (ABS,DATA)
      000000                        212 	.org 0x0000
                           000080   213 G$P0_0$0_0$0 == 0x0080
                           000080   214 _P0_0	=	0x0080
                           000081   215 G$P0_1$0_0$0 == 0x0081
                           000081   216 _P0_1	=	0x0081
                           000082   217 G$P0_2$0_0$0 == 0x0082
                           000082   218 _P0_2	=	0x0082
                           000083   219 G$P0_3$0_0$0 == 0x0083
                           000083   220 _P0_3	=	0x0083
                           000084   221 G$P0_4$0_0$0 == 0x0084
                           000084   222 _P0_4	=	0x0084
                           000085   223 G$P0_5$0_0$0 == 0x0085
                           000085   224 _P0_5	=	0x0085
                           000086   225 G$P0_6$0_0$0 == 0x0086
                           000086   226 _P0_6	=	0x0086
                           000087   227 G$P0_7$0_0$0 == 0x0087
                           000087   228 _P0_7	=	0x0087
                           000088   229 G$IT0$0_0$0 == 0x0088
                           000088   230 _IT0	=	0x0088
                           000089   231 G$IE0$0_0$0 == 0x0089
                           000089   232 _IE0	=	0x0089
                           00008A   233 G$IT1$0_0$0 == 0x008a
                           00008A   234 _IT1	=	0x008a
                           00008B   235 G$IE1$0_0$0 == 0x008b
                           00008B   236 _IE1	=	0x008b
                           00008C   237 G$TR0$0_0$0 == 0x008c
                           00008C   238 _TR0	=	0x008c
                           00008D   239 G$TF0$0_0$0 == 0x008d
                           00008D   240 _TF0	=	0x008d
                           00008E   241 G$TR1$0_0$0 == 0x008e
                           00008E   242 _TR1	=	0x008e
                           00008F   243 G$TF1$0_0$0 == 0x008f
                           00008F   244 _TF1	=	0x008f
                           000090   245 G$P1_0$0_0$0 == 0x0090
                           000090   246 _P1_0	=	0x0090
                           000091   247 G$P1_1$0_0$0 == 0x0091
                           000091   248 _P1_1	=	0x0091
                           000092   249 G$P1_2$0_0$0 == 0x0092
                           000092   250 _P1_2	=	0x0092
                           000093   251 G$P1_3$0_0$0 == 0x0093
                           000093   252 _P1_3	=	0x0093
                           000094   253 G$P1_4$0_0$0 == 0x0094
                           000094   254 _P1_4	=	0x0094
                           000095   255 G$P1_5$0_0$0 == 0x0095
                           000095   256 _P1_5	=	0x0095
                           000096   257 G$P1_6$0_0$0 == 0x0096
                           000096   258 _P1_6	=	0x0096
                           000097   259 G$P1_7$0_0$0 == 0x0097
                           000097   260 _P1_7	=	0x0097
                           000098   261 G$RI$0_0$0 == 0x0098
                           000098   262 _RI	=	0x0098
                           000099   263 G$TI$0_0$0 == 0x0099
                           000099   264 _TI	=	0x0099
                           00009A   265 G$RB8$0_0$0 == 0x009a
                           00009A   266 _RB8	=	0x009a
                           00009B   267 G$TB8$0_0$0 == 0x009b
                           00009B   268 _TB8	=	0x009b
                           00009C   269 G$REN$0_0$0 == 0x009c
                           00009C   270 _REN	=	0x009c
                           00009D   271 G$SM2$0_0$0 == 0x009d
                           00009D   272 _SM2	=	0x009d
                           00009E   273 G$SM1$0_0$0 == 0x009e
                           00009E   274 _SM1	=	0x009e
                           00009F   275 G$SM0$0_0$0 == 0x009f
                           00009F   276 _SM0	=	0x009f
                           0000A0   277 G$P2_0$0_0$0 == 0x00a0
                           0000A0   278 _P2_0	=	0x00a0
                           0000A1   279 G$P2_1$0_0$0 == 0x00a1
                           0000A1   280 _P2_1	=	0x00a1
                           0000A2   281 G$P2_2$0_0$0 == 0x00a2
                           0000A2   282 _P2_2	=	0x00a2
                           0000A3   283 G$P2_3$0_0$0 == 0x00a3
                           0000A3   284 _P2_3	=	0x00a3
                           0000A4   285 G$P2_4$0_0$0 == 0x00a4
                           0000A4   286 _P2_4	=	0x00a4
                           0000A5   287 G$P2_5$0_0$0 == 0x00a5
                           0000A5   288 _P2_5	=	0x00a5
                           0000A6   289 G$P2_6$0_0$0 == 0x00a6
                           0000A6   290 _P2_6	=	0x00a6
                           0000A7   291 G$P2_7$0_0$0 == 0x00a7
                           0000A7   292 _P2_7	=	0x00a7
                           0000A8   293 G$EX0$0_0$0 == 0x00a8
                           0000A8   294 _EX0	=	0x00a8
                           0000A9   295 G$ET0$0_0$0 == 0x00a9
                           0000A9   296 _ET0	=	0x00a9
                           0000AA   297 G$EX1$0_0$0 == 0x00aa
                           0000AA   298 _EX1	=	0x00aa
                           0000AB   299 G$ET1$0_0$0 == 0x00ab
                           0000AB   300 _ET1	=	0x00ab
                           0000AC   301 G$ES$0_0$0 == 0x00ac
                           0000AC   302 _ES	=	0x00ac
                           0000AF   303 G$EA$0_0$0 == 0x00af
                           0000AF   304 _EA	=	0x00af
                           0000B0   305 G$P3_0$0_0$0 == 0x00b0
                           0000B0   306 _P3_0	=	0x00b0
                           0000B1   307 G$P3_1$0_0$0 == 0x00b1
                           0000B1   308 _P3_1	=	0x00b1
                           0000B2   309 G$P3_2$0_0$0 == 0x00b2
                           0000B2   310 _P3_2	=	0x00b2
                           0000B3   311 G$P3_3$0_0$0 == 0x00b3
                           0000B3   312 _P3_3	=	0x00b3
                           0000B4   313 G$P3_4$0_0$0 == 0x00b4
                           0000B4   314 _P3_4	=	0x00b4
                           0000B5   315 G$P3_5$0_0$0 == 0x00b5
                           0000B5   316 _P3_5	=	0x00b5
                           0000B6   317 G$P3_6$0_0$0 == 0x00b6
                           0000B6   318 _P3_6	=	0x00b6
                           0000B7   319 G$P3_7$0_0$0 == 0x00b7
                           0000B7   320 _P3_7	=	0x00b7
                           0000B0   321 G$RXD$0_0$0 == 0x00b0
                           0000B0   322 _RXD	=	0x00b0
                           0000B1   323 G$TXD$0_0$0 == 0x00b1
                           0000B1   324 _TXD	=	0x00b1
                           0000B2   325 G$INT0$0_0$0 == 0x00b2
                           0000B2   326 _INT0	=	0x00b2
                           0000B3   327 G$INT1$0_0$0 == 0x00b3
                           0000B3   328 _INT1	=	0x00b3
                           0000B4   329 G$T0$0_0$0 == 0x00b4
                           0000B4   330 _T0	=	0x00b4
                           0000B5   331 G$T1$0_0$0 == 0x00b5
                           0000B5   332 _T1	=	0x00b5
                           0000B6   333 G$WR$0_0$0 == 0x00b6
                           0000B6   334 _WR	=	0x00b6
                           0000B7   335 G$RD$0_0$0 == 0x00b7
                           0000B7   336 _RD	=	0x00b7
                           0000B8   337 G$PX0$0_0$0 == 0x00b8
                           0000B8   338 _PX0	=	0x00b8
                           0000B9   339 G$PT0$0_0$0 == 0x00b9
                           0000B9   340 _PT0	=	0x00b9
                           0000BA   341 G$PX1$0_0$0 == 0x00ba
                           0000BA   342 _PX1	=	0x00ba
                           0000BB   343 G$PT1$0_0$0 == 0x00bb
                           0000BB   344 _PT1	=	0x00bb
                           0000BC   345 G$PS$0_0$0 == 0x00bc
                           0000BC   346 _PS	=	0x00bc
                           0000D0   347 G$P$0_0$0 == 0x00d0
                           0000D0   348 _P	=	0x00d0
                           0000D1   349 G$F1$0_0$0 == 0x00d1
                           0000D1   350 _F1	=	0x00d1
                           0000D2   351 G$OV$0_0$0 == 0x00d2
                           0000D2   352 _OV	=	0x00d2
                           0000D3   353 G$RS0$0_0$0 == 0x00d3
                           0000D3   354 _RS0	=	0x00d3
                           0000D4   355 G$RS1$0_0$0 == 0x00d4
                           0000D4   356 _RS1	=	0x00d4
                           0000D5   357 G$F0$0_0$0 == 0x00d5
                           0000D5   358 _F0	=	0x00d5
                           0000D6   359 G$AC$0_0$0 == 0x00d6
                           0000D6   360 _AC	=	0x00d6
                           0000D7   361 G$CY$0_0$0 == 0x00d7
                           0000D7   362 _CY	=	0x00d7
                                    363 ;--------------------------------------------------------
                                    364 ; overlayable register banks
                                    365 ;--------------------------------------------------------
                                    366 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        367 	.ds 8
                                    368 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        369 	.ds 8
                                    370 ;--------------------------------------------------------
                                    371 ; overlayable bit register bank
                                    372 ;--------------------------------------------------------
                                    373 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        374 bits:
      000000                        375 	.ds 1
                           008000   376 	b0 = bits[0]
                           008100   377 	b1 = bits[1]
                           008200   378 	b2 = bits[2]
                           008300   379 	b3 = bits[3]
                           008400   380 	b4 = bits[4]
                           008500   381 	b5 = bits[5]
                           008600   382 	b6 = bits[6]
                           008700   383 	b7 = bits[7]
                                    384 ;--------------------------------------------------------
                                    385 ; internal ram data
                                    386 ;--------------------------------------------------------
                                    387 	.area DSEG    (DATA)
                           000000   388 Lmain.LS_595_DataOut$Col_Data$1_0$31==.
      000000                        389 _LS_595_DataOut_PARM_2:
      000000                        390 	.ds 1
                           000001   391 Lmain.LS_DisplayOneCol$Row_Index$1_0$39==.
      000001                        392 _LS_DisplayOneCol_PARM_2:
      000001                        393 	.ds 1
                           000002   394 Lmain.systick_interrupt$sloc0$0_1$0==.
      000002                        395 _systick_interrupt_sloc0_1_0:
      000002                        396 	.ds 8
                           00000A   397 Lmain.On_Uart_Idle$length$1_0$69==.
      00000A                        398 _On_Uart_Idle_PARM_2:
      00000A                        399 	.ds 2
                           00000C   400 Lmain.On_Uart_Buff_Full$length$1_0$74==.
      00000C                        401 _On_Uart_Buff_Full_PARM_2:
      00000C                        402 	.ds 2
                           00000E   403 Lmain.main$sloc0$0_1$0==.
      00000E                        404 _main_sloc0_1_0:
      00000E                        405 	.ds 8
                                    406 ;--------------------------------------------------------
                                    407 ; overlayable items in internal ram 
                                    408 ;--------------------------------------------------------
                                    409 ;--------------------------------------------------------
                                    410 ; Stack segment in internal ram 
                                    411 ;--------------------------------------------------------
                                    412 	.area	SSEG
      000000                        413 __start__stack:
      000000                        414 	.ds	1
                                    415 
                                    416 ;--------------------------------------------------------
                                    417 ; indirectly addressable internal ram data
                                    418 ;--------------------------------------------------------
                                    419 	.area ISEG    (DATA)
                           000000   420 G$LS_RAM$0_0$0==.
      000000                        421 _LS_RAM::
      000000                        422 	.ds 8
                           000008   423 Fmain$LS_Current_Index$0_0$0==.
      000008                        424 _LS_Current_Index:
      000008                        425 	.ds 1
                           000009   426 G$systick$0_0$0==.
      000009                        427 _systick::
      000009                        428 	.ds 8
                           000011   429 G$Uart_Receive_Buff$0_0$0==.
      000011                        430 _Uart_Receive_Buff::
      000011                        431 	.ds 64
                           000051   432 G$Uart_Receive_Buff_Index$0_0$0==.
      000051                        433 _Uart_Receive_Buff_Index::
      000051                        434 	.ds 1
                           000052   435 G$Last_Receive_Tick$0_0$0==.
      000052                        436 _Last_Receive_Tick::
      000052                        437 	.ds 8
                                    438 ;--------------------------------------------------------
                                    439 ; absolute internal ram data
                                    440 ;--------------------------------------------------------
                                    441 	.area IABS    (ABS,DATA)
                                    442 	.area IABS    (ABS,DATA)
                                    443 ;--------------------------------------------------------
                                    444 ; bit data
                                    445 ;--------------------------------------------------------
                                    446 	.area BSEG    (BIT)
                           000000   447 G$Tx_Busy$0_0$0==.
      000000                        448 _Tx_Busy::
      000000                        449 	.ds 1
                                    450 ;--------------------------------------------------------
                                    451 ; paged external ram data
                                    452 ;--------------------------------------------------------
                                    453 	.area PSEG    (PAG,XDATA)
                                    454 ;--------------------------------------------------------
                                    455 ; external ram data
                                    456 ;--------------------------------------------------------
                                    457 	.area XSEG    (XDATA)
                                    458 ;--------------------------------------------------------
                                    459 ; absolute external ram data
                                    460 ;--------------------------------------------------------
                                    461 	.area XABS    (ABS,XDATA)
                                    462 ;--------------------------------------------------------
                                    463 ; external initialized ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area XISEG   (XDATA)
                                    466 	.area HOME    (CODE)
                                    467 	.area GSINIT0 (CODE)
                                    468 	.area GSINIT1 (CODE)
                                    469 	.area GSINIT2 (CODE)
                                    470 	.area GSINIT3 (CODE)
                                    471 	.area GSINIT4 (CODE)
                                    472 	.area GSINIT5 (CODE)
                                    473 	.area GSINIT  (CODE)
                                    474 	.area GSFINAL (CODE)
                                    475 	.area CSEG    (CODE)
                                    476 ;--------------------------------------------------------
                                    477 ; interrupt vector 
                                    478 ;--------------------------------------------------------
                                    479 	.area HOME    (CODE)
      000000                        480 __interrupt_vect:
      000000 02r00r00         [24]  481 	ljmp	__sdcc_gsinit_startup
      000003 02r03rEF         [24]  482 	ljmp	_Clk_In_Interrupt
      000006                        483 	.ds	5
      00000B 02r02r4B         [24]  484 	ljmp	_systick_interrupt
      00000E                        485 	.ds	5
      000013 32               [24]  486 	reti
      000014                        487 	.ds	7
      00001B 32               [24]  488 	reti
      00001C                        489 	.ds	7
      000023 02r03r4E         [24]  490 	ljmp	_Uart_Interrupt
                                    491 ;--------------------------------------------------------
                                    492 ; global & static initialisations
                                    493 ;--------------------------------------------------------
                                    494 	.area HOME    (CODE)
                                    495 	.area GSINIT  (CODE)
                                    496 	.area GSFINAL (CODE)
                                    497 	.area GSINIT  (CODE)
                                    498 	.globl __sdcc_gsinit_startup
                                    499 	.globl __sdcc_program_startup
                                    500 	.globl __start__stack
                                    501 	.globl __mcs51_genXINIT
                                    502 	.globl __mcs51_genXRAMCLEAR
                                    503 	.globl __mcs51_genRAMCLEAR
                           000000   504 	C$LatticeScreen.c$3$1_0$76 ==.
                                    505 ;	LatticeScreen.c:3: unsigned char __idata LS_RAM[8]={0x0,0x10,0x38,0x54,0x10,0x10,0x10,0x0};//默认显示数据，向左的箭头
      000000 78r00            [12]  506 	mov	r0,#_LS_RAM
      000002 76 00            [12]  507 	mov	@r0,#0x00
      000004 78r01            [12]  508 	mov	r0,#(_LS_RAM + 0x0001)
      000006 76 10            [12]  509 	mov	@r0,#0x10
      000008 78r02            [12]  510 	mov	r0,#(_LS_RAM + 0x0002)
      00000A 76 38            [12]  511 	mov	@r0,#0x38
      00000C 78r03            [12]  512 	mov	r0,#(_LS_RAM + 0x0003)
      00000E 76 54            [12]  513 	mov	@r0,#0x54
      000010 78r04            [12]  514 	mov	r0,#(_LS_RAM + 0x0004)
      000012 76 10            [12]  515 	mov	@r0,#0x10
      000014 78r05            [12]  516 	mov	r0,#(_LS_RAM + 0x0005)
      000016 76 10            [12]  517 	mov	@r0,#0x10
      000018 78r06            [12]  518 	mov	r0,#(_LS_RAM + 0x0006)
      00001A 76 10            [12]  519 	mov	@r0,#0x10
      00001C 78r07            [12]  520 	mov	r0,#(_LS_RAM + 0x0007)
      00001E 76 00            [12]  521 	mov	@r0,#0x00
                           000020   522 	C$LatticeScreen.c$94$1_0$76 ==.
                                    523 ;	LatticeScreen.c:94: static unsigned __idata char LS_Current_Index=0;
      000020 78r08            [12]  524 	mov	r0,#_LS_Current_Index
      000022 76 00            [12]  525 	mov	@r0,#0x00
                           000024   526 	C$main.c$24$1_0$76 ==.
                                    527 ;	main.c:24: __idata uint64_t systick=0;//系统主时间，由Timer0驱动，需要链接liblonglong.lib,否则无法链接成功
      000024 78r09            [12]  528 	mov	r0,#_systick
      000026 E4               [12]  529 	clr	a
      000027 F6               [12]  530 	mov	@r0,a
      000028 08               [12]  531 	inc	r0
      000029 F6               [12]  532 	mov	@r0,a
      00002A 08               [12]  533 	inc	r0
      00002B F6               [12]  534 	mov	@r0,a
      00002C 08               [12]  535 	inc	r0
      00002D F6               [12]  536 	mov	@r0,a
      00002E 08               [12]  537 	inc	r0
      00002F F6               [12]  538 	mov	@r0,a
      000030 08               [12]  539 	inc	r0
      000031 F6               [12]  540 	mov	@r0,a
      000032 08               [12]  541 	inc	r0
      000033 F6               [12]  542 	mov	@r0,a
      000034 08               [12]  543 	inc	r0
      000035 F6               [12]  544 	mov	@r0,a
                           000036   545 	C$main.c$135$1_0$76 ==.
                                    546 ;	main.c:135: __idata uint8_t Uart_Receive_Buff[64],Uart_Receive_Buff_Index=0;
      000036 78r51            [12]  547 	mov	r0,#_Uart_Receive_Buff_Index
      000038 76 00            [12]  548 	mov	@r0,#0x00
                           00003A   549 	C$main.c$136$1_0$76 ==.
                                    550 ;	main.c:136: __idata uint64_t Last_Receive_Tick=0;
      00003A 78r52            [12]  551 	mov	r0,#_Last_Receive_Tick
      00003C F6               [12]  552 	mov	@r0,a
      00003D 08               [12]  553 	inc	r0
      00003E F6               [12]  554 	mov	@r0,a
      00003F 08               [12]  555 	inc	r0
      000040 F6               [12]  556 	mov	@r0,a
      000041 08               [12]  557 	inc	r0
      000042 F6               [12]  558 	mov	@r0,a
      000043 08               [12]  559 	inc	r0
      000044 F6               [12]  560 	mov	@r0,a
      000045 08               [12]  561 	inc	r0
      000046 F6               [12]  562 	mov	@r0,a
      000047 08               [12]  563 	inc	r0
      000048 F6               [12]  564 	mov	@r0,a
      000049 08               [12]  565 	inc	r0
      00004A F6               [12]  566 	mov	@r0,a
                           00004B   567 	C$main.c$77$1_0$76 ==.
                                    568 ;	main.c:77: __bit Tx_Busy=0;//串口发送忙标志
                                    569 ;	assignBit
      00004B C2*00            [12]  570 	clr	_Tx_Busy
                                    571 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  572 	ljmp	__sdcc_program_startup
                                    573 ;--------------------------------------------------------
                                    574 ; Home
                                    575 ;--------------------------------------------------------
                                    576 	.area HOME    (CODE)
                                    577 	.area HOME    (CODE)
      000026                        578 __sdcc_program_startup:
      000026 02r04r6F         [24]  579 	ljmp	_main
                                    580 ;	return from main will return to caller
                                    581 ;--------------------------------------------------------
                                    582 ; code
                                    583 ;--------------------------------------------------------
                                    584 	.area CSEG    (CODE)
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'LS_Init'
                                    587 ;------------------------------------------------------------
                                    588 ;P1M1                      Allocated with name '_LS_Init_P1M1_65536_29'
                                    589 ;P1M0                      Allocated with name '_LS_Init_P1M0_65536_29'
                                    590 ;------------------------------------------------------------
                           000000   591 	G$LS_Init$0$0 ==.
                           000000   592 	C$LatticeScreen.c$9$0_0$29 ==.
                                    593 ;	LatticeScreen.c:9: void LS_Init()
                                    594 ;	-----------------------------------------
                                    595 ;	 function LS_Init
                                    596 ;	-----------------------------------------
      000000                        597 _LS_Init:
                           000007   598 	ar7 = 0x07
                           000006   599 	ar6 = 0x06
                           000005   600 	ar5 = 0x05
                           000004   601 	ar4 = 0x04
                           000003   602 	ar3 = 0x03
                           000002   603 	ar2 = 0x02
                           000001   604 	ar1 = 0x01
                           000000   605 	ar0 = 0x00
                           000000   606 	C$LatticeScreen.c$16$1_0$29 ==.
                                    607 ;	LatticeScreen.c:16: P1M0|=0x3f;
      000000 43 92 3F         [24]  608 	orl	_LS_Init_P1M0_65536_29,#0x3f
                           000003   609 	C$LatticeScreen.c$17$1_0$29 ==.
                                    610 ;	LatticeScreen.c:17: P1M1&=~0x3f;
      000003 53 91 C0         [24]  611 	anl	_LS_Init_P1M1_65536_29,#0xc0
                           000006   612 	C$LatticeScreen.c$20$1_0$29 ==.
                                    613 ;	LatticeScreen.c:20: RCK=0;
                                    614 ;	assignBit
      000006 C2 94            [12]  615 	clr	_P1_4
                           000008   616 	C$LatticeScreen.c$21$1_0$29 ==.
                                    617 ;	LatticeScreen.c:21: SCK=0;
                                    618 ;	assignBit
      000008 C2 95            [12]  619 	clr	_P1_5
                           00000A   620 	C$LatticeScreen.c$24$1_0$29 ==.
                                    621 ;	LatticeScreen.c:24: SCLR=0;
                                    622 ;	assignBit
      00000A C2 90            [12]  623 	clr	_P1_0
                           00000C   624 	C$LatticeScreen.c$25$1_0$29 ==.
                                    625 ;	LatticeScreen.c:25: SCLR=1;
                                    626 ;	assignBit
      00000C D2 90            [12]  627 	setb	_P1_0
                           00000E   628 	C$LatticeScreen.c$27$1_0$29 ==.
                                    629 ;	LatticeScreen.c:27: OE=0;
                                    630 ;	assignBit
      00000E C2 91            [12]  631 	clr	_P1_1
                           000010   632 	C$LatticeScreen.c$28$1_0$29 ==.
                                    633 ;	LatticeScreen.c:28: }
                           000010   634 	C$LatticeScreen.c$28$1_0$29 ==.
                           000010   635 	XG$LS_Init$0$0 ==.
      000010 22               [24]  636 	ret
                                    637 ;------------------------------------------------------------
                                    638 ;Allocation info for local variables in function 'LS_Deinit'
                                    639 ;------------------------------------------------------------
                                    640 ;P1M1                      Allocated with name '_LS_Deinit_P1M1_65536_30'
                                    641 ;P1M0                      Allocated with name '_LS_Deinit_P1M0_65536_30'
                                    642 ;------------------------------------------------------------
                           000011   643 	G$LS_Deinit$0$0 ==.
                           000011   644 	C$LatticeScreen.c$30$1_0$30 ==.
                                    645 ;	LatticeScreen.c:30: void LS_Deinit()
                                    646 ;	-----------------------------------------
                                    647 ;	 function LS_Deinit
                                    648 ;	-----------------------------------------
      000011                        649 _LS_Deinit:
                           000011   650 	C$LatticeScreen.c$36$1_0$30 ==.
                                    651 ;	LatticeScreen.c:36: P1M0&=~0x3f;
      000011 53 92 C0         [24]  652 	anl	_LS_Deinit_P1M0_65536_30,#0xc0
                           000014   653 	C$LatticeScreen.c$37$1_0$30 ==.
                                    654 ;	LatticeScreen.c:37: P1M1&=~0x3f;
      000014 53 91 C0         [24]  655 	anl	_LS_Deinit_P1M1_65536_30,#0xc0
                           000017   656 	C$LatticeScreen.c$40$1_0$30 ==.
                                    657 ;	LatticeScreen.c:40: RCK=0;
                                    658 ;	assignBit
      000017 C2 94            [12]  659 	clr	_P1_4
                           000019   660 	C$LatticeScreen.c$41$1_0$30 ==.
                                    661 ;	LatticeScreen.c:41: SCK=0;
                                    662 ;	assignBit
      000019 C2 95            [12]  663 	clr	_P1_5
                           00001B   664 	C$LatticeScreen.c$44$1_0$30 ==.
                                    665 ;	LatticeScreen.c:44: SCLR=0;
                                    666 ;	assignBit
      00001B C2 90            [12]  667 	clr	_P1_0
                           00001D   668 	C$LatticeScreen.c$46$1_0$30 ==.
                                    669 ;	LatticeScreen.c:46: OE=1;
                                    670 ;	assignBit
      00001D D2 91            [12]  671 	setb	_P1_1
                           00001F   672 	C$LatticeScreen.c$47$1_0$30 ==.
                                    673 ;	LatticeScreen.c:47: }
                           00001F   674 	C$LatticeScreen.c$47$1_0$30 ==.
                           00001F   675 	XG$LS_Deinit$0$0 ==.
      00001F 22               [24]  676 	ret
                                    677 ;------------------------------------------------------------
                                    678 ;Allocation info for local variables in function 'LS_595_DataOut'
                                    679 ;------------------------------------------------------------
                                    680 ;Col_Data                  Allocated with name '_LS_595_DataOut_PARM_2'
                                    681 ;Row_Data                  Allocated to registers r7 
                                    682 ;i                         Allocated to registers r6 
                                    683 ;------------------------------------------------------------
                           000020   684 	G$LS_595_DataOut$0$0 ==.
                           000020   685 	C$LatticeScreen.c$49$1_0$32 ==.
                                    686 ;	LatticeScreen.c:49: void LS_595_DataOut(unsigned char Row_Data,unsigned char Col_Data)//输出数据到595
                                    687 ;	-----------------------------------------
                                    688 ;	 function LS_595_DataOut
                                    689 ;	-----------------------------------------
      000020                        690 _LS_595_DataOut:
      000020 AF 82            [24]  691 	mov	r7,dpl
                           000022   692 	C$LatticeScreen.c$53$1_0$32 ==.
                                    693 ;	LatticeScreen.c:53: RCK=0;
                                    694 ;	assignBit
      000022 C2 94            [12]  695 	clr	_P1_4
                           000024   696 	C$LatticeScreen.c$54$1_0$32 ==.
                                    697 ;	LatticeScreen.c:54: SCK=0;
                                    698 ;	assignBit
      000024 C2 95            [12]  699 	clr	_P1_5
                           000026   700 	C$LatticeScreen.c$56$2_0$33 ==.
                                    701 ;	LatticeScreen.c:56: for(i=0;i<8;i++)
      000026 7E 00            [12]  702 	mov	r6,#0x00
      000028                        703 00108$:
                           000028   704 	C$LatticeScreen.c$58$3_0$34 ==.
                                    705 ;	LatticeScreen.c:58: SCK=0;
                                    706 ;	assignBit
      000028 C2 95            [12]  707 	clr	_P1_5
                           00002A   708 	C$LatticeScreen.c$59$3_0$34 ==.
                                    709 ;	LatticeScreen.c:59: if(Row_Data & (1<<i))
      00002A 8E F0            [24]  710 	mov	b,r6
      00002C 05 F0            [12]  711 	inc	b
      00002E 7C 01            [12]  712 	mov	r4,#0x01
      000030 7D 00            [12]  713 	mov	r5,#0x00
      000032 80 06            [24]  714 	sjmp	00129$
      000034                        715 00128$:
      000034 EC               [12]  716 	mov	a,r4
      000035 2C               [12]  717 	add	a,r4
      000036 FC               [12]  718 	mov	r4,a
      000037 ED               [12]  719 	mov	a,r5
      000038 33               [12]  720 	rlc	a
      000039 FD               [12]  721 	mov	r5,a
      00003A                        722 00129$:
      00003A D5 F0 F7         [24]  723 	djnz	b,00128$
      00003D 8F 02            [24]  724 	mov	ar2,r7
      00003F 7B 00            [12]  725 	mov	r3,#0x00
      000041 EA               [12]  726 	mov	a,r2
      000042 52 04            [12]  727 	anl	ar4,a
      000044 EB               [12]  728 	mov	a,r3
      000045 52 05            [12]  729 	anl	ar5,a
      000047 EC               [12]  730 	mov	a,r4
      000048 4D               [12]  731 	orl	a,r5
      000049 60 04            [24]  732 	jz	00102$
                           00004B   733 	C$LatticeScreen.c$61$4_0$35 ==.
                                    734 ;	LatticeScreen.c:61: ROW_IN=1;
                                    735 ;	assignBit
      00004B D2 92            [12]  736 	setb	_P1_2
      00004D 80 02            [24]  737 	sjmp	00103$
      00004F                        738 00102$:
                           00004F   739 	C$LatticeScreen.c$65$4_0$36 ==.
                                    740 ;	LatticeScreen.c:65: ROW_IN=0;
                                    741 ;	assignBit
      00004F C2 92            [12]  742 	clr	_P1_2
      000051                        743 00103$:
                           000051   744 	C$LatticeScreen.c$68$3_0$34 ==.
                                    745 ;	LatticeScreen.c:68: if(Col_Data & (1<<i))
      000051 8E F0            [24]  746 	mov	b,r6
      000053 05 F0            [12]  747 	inc	b
      000055 7C 01            [12]  748 	mov	r4,#0x01
      000057 7D 00            [12]  749 	mov	r5,#0x00
      000059 80 06            [24]  750 	sjmp	00132$
      00005B                        751 00131$:
      00005B EC               [12]  752 	mov	a,r4
      00005C 2C               [12]  753 	add	a,r4
      00005D FC               [12]  754 	mov	r4,a
      00005E ED               [12]  755 	mov	a,r5
      00005F 33               [12]  756 	rlc	a
      000060 FD               [12]  757 	mov	r5,a
      000061                        758 00132$:
      000061 D5 F0 F7         [24]  759 	djnz	b,00131$
      000064 AA*00            [24]  760 	mov	r2,_LS_595_DataOut_PARM_2
      000066 7B 00            [12]  761 	mov	r3,#0x00
      000068 EA               [12]  762 	mov	a,r2
      000069 52 04            [12]  763 	anl	ar4,a
      00006B EB               [12]  764 	mov	a,r3
      00006C 52 05            [12]  765 	anl	ar5,a
      00006E EC               [12]  766 	mov	a,r4
      00006F 4D               [12]  767 	orl	a,r5
      000070 60 04            [24]  768 	jz	00105$
                           000072   769 	C$LatticeScreen.c$70$4_0$37 ==.
                                    770 ;	LatticeScreen.c:70: COL_IN=1;
                                    771 ;	assignBit
      000072 D2 93            [12]  772 	setb	_P1_3
      000074 80 02            [24]  773 	sjmp	00106$
      000076                        774 00105$:
                           000076   775 	C$LatticeScreen.c$74$4_0$38 ==.
                                    776 ;	LatticeScreen.c:74: COL_IN=0;
                                    777 ;	assignBit
      000076 C2 93            [12]  778 	clr	_P1_3
      000078                        779 00106$:
                           000078   780 	C$LatticeScreen.c$77$3_0$34 ==.
                                    781 ;	LatticeScreen.c:77: SCK=1;
                                    782 ;	assignBit
      000078 D2 95            [12]  783 	setb	_P1_5
                           00007A   784 	C$LatticeScreen.c$56$2_0$33 ==.
                                    785 ;	LatticeScreen.c:56: for(i=0;i<8;i++)
      00007A 0E               [12]  786 	inc	r6
      00007B BE 08 00         [24]  787 	cjne	r6,#0x08,00134$
      00007E                        788 00134$:
      00007E 40 A8            [24]  789 	jc	00108$
                           000080   790 	C$LatticeScreen.c$80$1_0$32 ==.
                                    791 ;	LatticeScreen.c:80: RCK=1;
                                    792 ;	assignBit
      000080 D2 94            [12]  793 	setb	_P1_4
                           000082   794 	C$LatticeScreen.c$82$1_0$32 ==.
                                    795 ;	LatticeScreen.c:82: }
                           000082   796 	C$LatticeScreen.c$82$1_0$32 ==.
                           000082   797 	XG$LS_595_DataOut$0$0 ==.
      000082 22               [24]  798 	ret
                                    799 ;------------------------------------------------------------
                                    800 ;Allocation info for local variables in function 'LS_DisplayOneCol'
                                    801 ;------------------------------------------------------------
                                    802 ;Row_Index                 Allocated with name '_LS_DisplayOneCol_PARM_2'
                                    803 ;Col_Data                  Allocated to registers r7 
                                    804 ;------------------------------------------------------------
                           000083   805 	G$LS_DisplayOneCol$0$0 ==.
                           000083   806 	C$LatticeScreen.c$85$1_0$40 ==.
                                    807 ;	LatticeScreen.c:85: void LS_DisplayOneCol(unsigned char Col_Data,unsigned char Row_Index)
                                    808 ;	-----------------------------------------
                                    809 ;	 function LS_DisplayOneCol
                                    810 ;	-----------------------------------------
      000083                        811 _LS_DisplayOneCol:
      000083 AF 82            [24]  812 	mov	r7,dpl
                           000085   813 	C$LatticeScreen.c$87$1_0$40 ==.
                                    814 ;	LatticeScreen.c:87: if(Row_Index < 8)
      000085 74 F8            [12]  815 	mov	a,#0x100 - 0x08
      000087 25*01            [12]  816 	add	a,_LS_DisplayOneCol_PARM_2
      000089 40 18            [24]  817 	jc	00103$
                           00008B   818 	C$LatticeScreen.c$89$2_0$41 ==.
                                    819 ;	LatticeScreen.c:89: LS_595_DataOut(1<<Row_Index,~(Col_Data));
      00008B AE*01            [24]  820 	mov	r6,_LS_DisplayOneCol_PARM_2
      00008D 8E F0            [24]  821 	mov	b,r6
      00008F 05 F0            [12]  822 	inc	b
      000091 74 01            [12]  823 	mov	a,#0x01
      000093 80 02            [24]  824 	sjmp	00112$
      000095                        825 00110$:
      000095 25 E0            [12]  826 	add	a,acc
      000097                        827 00112$:
      000097 D5 F0 FB         [24]  828 	djnz	b,00110$
      00009A F5 82            [12]  829 	mov	dpl,a
      00009C EF               [12]  830 	mov	a,r7
      00009D F4               [12]  831 	cpl	a
      00009E F5*00            [12]  832 	mov	_LS_595_DataOut_PARM_2,a
      0000A0 12r00r20         [24]  833 	lcall	_LS_595_DataOut
      0000A3                        834 00103$:
                           0000A3   835 	C$LatticeScreen.c$92$1_0$40 ==.
                                    836 ;	LatticeScreen.c:92: }
                           0000A3   837 	C$LatticeScreen.c$92$1_0$40 ==.
                           0000A3   838 	XG$LS_DisplayOneCol$0$0 ==.
      0000A3 22               [24]  839 	ret
                                    840 ;------------------------------------------------------------
                                    841 ;Allocation info for local variables in function 'LS_Refresh'
                                    842 ;------------------------------------------------------------
                           0000A4   843 	G$LS_Refresh$0$0 ==.
                           0000A4   844 	C$LatticeScreen.c$96$1_0$42 ==.
                                    845 ;	LatticeScreen.c:96: void LS_Refresh()
                                    846 ;	-----------------------------------------
                                    847 ;	 function LS_Refresh
                                    848 ;	-----------------------------------------
      0000A4                        849 _LS_Refresh:
                           0000A4   850 	C$LatticeScreen.c$99$1_0$42 ==.
                                    851 ;	LatticeScreen.c:99: LS_DisplayOneCol(LS_RAM[LS_Current_Index],LS_Current_Index++);
      0000A4 78r08            [12]  852 	mov	r0,#_LS_Current_Index
      0000A6 E6               [12]  853 	mov	a,@r0
      0000A7 24r00            [12]  854 	add	a,#_LS_RAM
      0000A9 F9               [12]  855 	mov	r1,a
      0000AA 87 82            [24]  856 	mov	dpl,@r1
      0000AC 78r08            [12]  857 	mov	r0,#_LS_Current_Index
      0000AE 86 07            [24]  858 	mov	ar7,@r0
      0000B0 78r08            [12]  859 	mov	r0,#_LS_Current_Index
      0000B2 EF               [12]  860 	mov	a,r7
      0000B3 04               [12]  861 	inc	a
      0000B4 F6               [12]  862 	mov	@r0,a
      0000B5 8F*01            [24]  863 	mov	_LS_DisplayOneCol_PARM_2,r7
      0000B7 12r00r83         [24]  864 	lcall	_LS_DisplayOneCol
                           0000BA   865 	C$LatticeScreen.c$100$1_0$42 ==.
                                    866 ;	LatticeScreen.c:100: if(LS_Current_Index>=8)
      0000BA 78r08            [12]  867 	mov	r0,#_LS_Current_Index
      0000BC B6 08 00         [24]  868 	cjne	@r0,#0x08,00109$
      0000BF                        869 00109$:
      0000BF 40 04            [24]  870 	jc	00103$
                           0000C1   871 	C$LatticeScreen.c$102$2_0$43 ==.
                                    872 ;	LatticeScreen.c:102: LS_Current_Index=0;
      0000C1 78r08            [12]  873 	mov	r0,#_LS_Current_Index
      0000C3 76 00            [12]  874 	mov	@r0,#0x00
      0000C5                        875 00103$:
                           0000C5   876 	C$LatticeScreen.c$105$1_0$42 ==.
                                    877 ;	LatticeScreen.c:105: }
                           0000C5   878 	C$LatticeScreen.c$105$1_0$42 ==.
                           0000C5   879 	XG$LS_Refresh$0$0 ==.
      0000C5 22               [24]  880 	ret
                                    881 ;------------------------------------------------------------
                                    882 ;Allocation info for local variables in function 'LS_Show_Char_Font5x7'
                                    883 ;------------------------------------------------------------
                                    884 ;c                         Allocated to registers r7 
                                    885 ;i                         Allocated to registers r5 
                                    886 ;font_pos                  Allocated to registers r6 r7 
                                    887 ;------------------------------------------------------------
                           0000C6   888 	G$LS_Show_Char_Font5x7$0$0 ==.
                           0000C6   889 	C$LatticeScreen.c$208$1_0$45 ==.
                                    890 ;	LatticeScreen.c:208: void LS_Show_Char_Font5x7(char c)//显示5x7字体
                                    891 ;	-----------------------------------------
                                    892 ;	 function LS_Show_Char_Font5x7
                                    893 ;	-----------------------------------------
      0000C6                        894 _LS_Show_Char_Font5x7:
      0000C6 AF 82            [24]  895 	mov	r7,dpl
                           0000C8   896 	C$LatticeScreen.c$210$1_0$45 ==.
                                    897 ;	LatticeScreen.c:210: if(c<' ')//不可显示字符，单8x8点阵不做处理
      0000C8 BF 20 00         [24]  898 	cjne	r7,#0x20,00164$
      0000CB                        899 00164$:
      0000CB 50 03            [24]  900 	jnc	00102$
                           0000CD   901 	C$LatticeScreen.c$211$1_0$45 ==.
                                    902 ;	LatticeScreen.c:211: return;
      0000CD 02r02r31         [24]  903 	ljmp	00106$
      0000D0                        904 00102$:
                           0000D0   905 	C$LatticeScreen.c$212$1_0$45 ==.
                                    906 ;	LatticeScreen.c:212: LS_RAM[0]=0x00;
      0000D0 78r00            [12]  907 	mov	r0,#_LS_RAM
      0000D2 76 00            [12]  908 	mov	@r0,#0x00
                           0000D4   909 	C$LatticeScreen.c$213$1_0$45 ==.
                                    910 ;	LatticeScreen.c:213: LS_RAM[1]=0x00;
      0000D4 78r01            [12]  911 	mov	r0,#(_LS_RAM + 0x0001)
      0000D6 76 00            [12]  912 	mov	@r0,#0x00
                           0000D8   913 	C$LatticeScreen.c$214$1_0$45 ==.
                                    914 ;	LatticeScreen.c:214: LS_RAM[7]=0x00;
      0000D8 78r07            [12]  915 	mov	r0,#(_LS_RAM + 0x0007)
                           0000DA   916 	C$LatticeScreen.c$217$1_1$46 ==.
                                    917 ;	LatticeScreen.c:217: uint16_t font_pos=(((uint16_t)c-0x20)*5);
      0000DA E4               [12]  918 	clr	a
      0000DB F6               [12]  919 	mov	@r0,a
      0000DC FE               [12]  920 	mov	r6,a
      0000DD EF               [12]  921 	mov	a,r7
      0000DE 24 E0            [12]  922 	add	a,#0xe0
      0000E0 F5*00            [12]  923 	mov	__mulint_PARM_2,a
      0000E2 EE               [12]  924 	mov	a,r6
      0000E3 34 FF            [12]  925 	addc	a,#0xff
      0000E5 F5*01            [12]  926 	mov	(__mulint_PARM_2 + 1),a
      0000E7 90 00 05         [24]  927 	mov	dptr,#0x0005
      0000EA 12r00r00         [24]  928 	lcall	__mulint
      0000ED AE 82            [24]  929 	mov	r6,dpl
      0000EF AF 83            [24]  930 	mov	r7,dph
                           0000F1   931 	C$LatticeScreen.c$218$2_1$47 ==.
                                    932 ;	LatticeScreen.c:218: for(i=0;i<5;i++)
      0000F1 7D 00            [12]  933 	mov	r5,#0x00
      0000F3                        934 00104$:
                           0000F3   935 	C$LatticeScreen.c$222$3_1$48 ==.
                                    936 ;	LatticeScreen.c:222: LS_RAM[i+2]=
      0000F3 8D 04            [24]  937 	mov	ar4,r5
      0000F5 74 02            [12]  938 	mov	a,#0x02
      0000F7 2C               [12]  939 	add	a,r4
      0000F8 24r00            [12]  940 	add	a,#_LS_RAM
      0000FA F9               [12]  941 	mov	r1,a
                           0000FB   942 	C$LatticeScreen.c$223$3_1$48 ==.
                                    943 ;	LatticeScreen.c:223: ((Font5x7[font_pos+i]&(1<<0))?(1<<7):(0))+
      0000FB 8D 03            [24]  944 	mov	ar3,r5
      0000FD 7C 00            [12]  945 	mov	r4,#0x00
      0000FF EB               [12]  946 	mov	a,r3
      000100 2E               [12]  947 	add	a,r6
      000101 FB               [12]  948 	mov	r3,a
      000102 EC               [12]  949 	mov	a,r4
      000103 3F               [12]  950 	addc	a,r7
      000104 FC               [12]  951 	mov	r4,a
      000105 EB               [12]  952 	mov	a,r3
      000106 24r00            [12]  953 	add	a,#_Font5x7
      000108 F5 82            [12]  954 	mov	dpl,a
      00010A EC               [12]  955 	mov	a,r4
      00010B 34s00            [12]  956 	addc	a,#(_Font5x7 >> 8)
      00010D F5 83            [12]  957 	mov	dph,a
      00010F E4               [12]  958 	clr	a
      000110 93               [24]  959 	movc	a,@a+dptr
      000111 30 E0 06         [24]  960 	jnb	acc.0,00108$
      000114 7B 80            [12]  961 	mov	r3,#0x80
      000116 7C FF            [12]  962 	mov	r4,#0xff
      000118 80 04            [24]  963 	sjmp	00109$
      00011A                        964 00108$:
      00011A 7B 00            [12]  965 	mov	r3,#0x00
      00011C 7C 00            [12]  966 	mov	r4,#0x00
      00011E                        967 00109$:
                           00011E   968 	C$LatticeScreen.c$224$3_1$48 ==.
                                    969 ;	LatticeScreen.c:224: ((Font5x7[font_pos+i]&(1<<1))?(1<<6):(0))+
      00011E 8D 02            [24]  970 	mov	ar2,r5
      000120 7C 00            [12]  971 	mov	r4,#0x00
      000122 EA               [12]  972 	mov	a,r2
      000123 2E               [12]  973 	add	a,r6
      000124 FA               [12]  974 	mov	r2,a
      000125 EC               [12]  975 	mov	a,r4
      000126 3F               [12]  976 	addc	a,r7
      000127 FC               [12]  977 	mov	r4,a
      000128 EA               [12]  978 	mov	a,r2
      000129 24r00            [12]  979 	add	a,#_Font5x7
      00012B F5 82            [12]  980 	mov	dpl,a
      00012D EC               [12]  981 	mov	a,r4
      00012E 34s00            [12]  982 	addc	a,#(_Font5x7 >> 8)
      000130 F5 83            [12]  983 	mov	dph,a
      000132 E4               [12]  984 	clr	a
      000133 93               [24]  985 	movc	a,@a+dptr
      000134 30 E1 06         [24]  986 	jnb	acc.1,00110$
      000137 7A 40            [12]  987 	mov	r2,#0x40
      000139 7C 00            [12]  988 	mov	r4,#0x00
      00013B 80 04            [24]  989 	sjmp	00111$
      00013D                        990 00110$:
      00013D 7A 00            [12]  991 	mov	r2,#0x00
      00013F 7C 00            [12]  992 	mov	r4,#0x00
      000141                        993 00111$:
      000141 EA               [12]  994 	mov	a,r2
      000142 2B               [12]  995 	add	a,r3
      000143 FC               [12]  996 	mov	r4,a
                           000144   997 	C$LatticeScreen.c$225$3_1$48 ==.
                                    998 ;	LatticeScreen.c:225: ((Font5x7[font_pos+i]&(1<<2))?(1<<5):(0))+
      000144 8D 02            [24]  999 	mov	ar2,r5
      000146 7B 00            [12] 1000 	mov	r3,#0x00
      000148 EA               [12] 1001 	mov	a,r2
      000149 2E               [12] 1002 	add	a,r6
      00014A FA               [12] 1003 	mov	r2,a
      00014B EB               [12] 1004 	mov	a,r3
      00014C 3F               [12] 1005 	addc	a,r7
      00014D FB               [12] 1006 	mov	r3,a
      00014E EA               [12] 1007 	mov	a,r2
      00014F 24r00            [12] 1008 	add	a,#_Font5x7
      000151 F5 82            [12] 1009 	mov	dpl,a
      000153 EB               [12] 1010 	mov	a,r3
      000154 34s00            [12] 1011 	addc	a,#(_Font5x7 >> 8)
      000156 F5 83            [12] 1012 	mov	dph,a
      000158 E4               [12] 1013 	clr	a
      000159 93               [24] 1014 	movc	a,@a+dptr
      00015A 30 E2 06         [24] 1015 	jnb	acc.2,00112$
      00015D 7A 20            [12] 1016 	mov	r2,#0x20
      00015F 7B 00            [12] 1017 	mov	r3,#0x00
      000161 80 04            [24] 1018 	sjmp	00113$
      000163                       1019 00112$:
      000163 7A 00            [12] 1020 	mov	r2,#0x00
      000165 7B 00            [12] 1021 	mov	r3,#0x00
      000167                       1022 00113$:
      000167 EA               [12] 1023 	mov	a,r2
      000168 2C               [12] 1024 	add	a,r4
      000169 FC               [12] 1025 	mov	r4,a
                           00016A  1026 	C$LatticeScreen.c$226$3_1$48 ==.
                                   1027 ;	LatticeScreen.c:226: ((Font5x7[font_pos+i]&(1<<3))?(1<<4):(0))+
      00016A 8D 02            [24] 1028 	mov	ar2,r5
      00016C 7B 00            [12] 1029 	mov	r3,#0x00
      00016E EA               [12] 1030 	mov	a,r2
      00016F 2E               [12] 1031 	add	a,r6
      000170 FA               [12] 1032 	mov	r2,a
      000171 EB               [12] 1033 	mov	a,r3
      000172 3F               [12] 1034 	addc	a,r7
      000173 FB               [12] 1035 	mov	r3,a
      000174 EA               [12] 1036 	mov	a,r2
      000175 24r00            [12] 1037 	add	a,#_Font5x7
      000177 F5 82            [12] 1038 	mov	dpl,a
      000179 EB               [12] 1039 	mov	a,r3
      00017A 34s00            [12] 1040 	addc	a,#(_Font5x7 >> 8)
      00017C F5 83            [12] 1041 	mov	dph,a
      00017E E4               [12] 1042 	clr	a
      00017F 93               [24] 1043 	movc	a,@a+dptr
      000180 30 E3 06         [24] 1044 	jnb	acc.3,00114$
      000183 7A 10            [12] 1045 	mov	r2,#0x10
      000185 7B 00            [12] 1046 	mov	r3,#0x00
      000187 80 04            [24] 1047 	sjmp	00115$
      000189                       1048 00114$:
      000189 7A 00            [12] 1049 	mov	r2,#0x00
      00018B 7B 00            [12] 1050 	mov	r3,#0x00
      00018D                       1051 00115$:
      00018D EA               [12] 1052 	mov	a,r2
      00018E 2C               [12] 1053 	add	a,r4
      00018F FC               [12] 1054 	mov	r4,a
                           000190  1055 	C$LatticeScreen.c$227$3_1$48 ==.
                                   1056 ;	LatticeScreen.c:227: ((Font5x7[font_pos+i]&(1<<4))?(1<<3):(0))+
      000190 8D 02            [24] 1057 	mov	ar2,r5
      000192 7B 00            [12] 1058 	mov	r3,#0x00
      000194 EA               [12] 1059 	mov	a,r2
      000195 2E               [12] 1060 	add	a,r6
      000196 FA               [12] 1061 	mov	r2,a
      000197 EB               [12] 1062 	mov	a,r3
      000198 3F               [12] 1063 	addc	a,r7
      000199 FB               [12] 1064 	mov	r3,a
      00019A EA               [12] 1065 	mov	a,r2
      00019B 24r00            [12] 1066 	add	a,#_Font5x7
      00019D F5 82            [12] 1067 	mov	dpl,a
      00019F EB               [12] 1068 	mov	a,r3
      0001A0 34s00            [12] 1069 	addc	a,#(_Font5x7 >> 8)
      0001A2 F5 83            [12] 1070 	mov	dph,a
      0001A4 E4               [12] 1071 	clr	a
      0001A5 93               [24] 1072 	movc	a,@a+dptr
      0001A6 30 E4 06         [24] 1073 	jnb	acc.4,00116$
      0001A9 7A 08            [12] 1074 	mov	r2,#0x08
      0001AB 7B 00            [12] 1075 	mov	r3,#0x00
      0001AD 80 04            [24] 1076 	sjmp	00117$
      0001AF                       1077 00116$:
      0001AF 7A 00            [12] 1078 	mov	r2,#0x00
      0001B1 7B 00            [12] 1079 	mov	r3,#0x00
      0001B3                       1080 00117$:
      0001B3 EA               [12] 1081 	mov	a,r2
      0001B4 2C               [12] 1082 	add	a,r4
      0001B5 FC               [12] 1083 	mov	r4,a
                           0001B6  1084 	C$LatticeScreen.c$228$3_1$48 ==.
                                   1085 ;	LatticeScreen.c:228: ((Font5x7[font_pos+i]&(1<<5))?(1<<2):(0))+
      0001B6 8D 02            [24] 1086 	mov	ar2,r5
      0001B8 7B 00            [12] 1087 	mov	r3,#0x00
      0001BA EA               [12] 1088 	mov	a,r2
      0001BB 2E               [12] 1089 	add	a,r6
      0001BC FA               [12] 1090 	mov	r2,a
      0001BD EB               [12] 1091 	mov	a,r3
      0001BE 3F               [12] 1092 	addc	a,r7
      0001BF FB               [12] 1093 	mov	r3,a
      0001C0 EA               [12] 1094 	mov	a,r2
      0001C1 24r00            [12] 1095 	add	a,#_Font5x7
      0001C3 F5 82            [12] 1096 	mov	dpl,a
      0001C5 EB               [12] 1097 	mov	a,r3
      0001C6 34s00            [12] 1098 	addc	a,#(_Font5x7 >> 8)
      0001C8 F5 83            [12] 1099 	mov	dph,a
      0001CA E4               [12] 1100 	clr	a
      0001CB 93               [24] 1101 	movc	a,@a+dptr
      0001CC 30 E5 06         [24] 1102 	jnb	acc.5,00118$
      0001CF 7A 04            [12] 1103 	mov	r2,#0x04
      0001D1 7B 00            [12] 1104 	mov	r3,#0x00
      0001D3 80 04            [24] 1105 	sjmp	00119$
      0001D5                       1106 00118$:
      0001D5 7A 00            [12] 1107 	mov	r2,#0x00
      0001D7 7B 00            [12] 1108 	mov	r3,#0x00
      0001D9                       1109 00119$:
      0001D9 EA               [12] 1110 	mov	a,r2
      0001DA 2C               [12] 1111 	add	a,r4
      0001DB FC               [12] 1112 	mov	r4,a
                           0001DC  1113 	C$LatticeScreen.c$229$3_1$48 ==.
                                   1114 ;	LatticeScreen.c:229: ((Font5x7[font_pos+i]&(1<<6))?(1<<1):(0))+
      0001DC 8D 02            [24] 1115 	mov	ar2,r5
      0001DE 7B 00            [12] 1116 	mov	r3,#0x00
      0001E0 EA               [12] 1117 	mov	a,r2
      0001E1 2E               [12] 1118 	add	a,r6
      0001E2 FA               [12] 1119 	mov	r2,a
      0001E3 EB               [12] 1120 	mov	a,r3
      0001E4 3F               [12] 1121 	addc	a,r7
      0001E5 FB               [12] 1122 	mov	r3,a
      0001E6 EA               [12] 1123 	mov	a,r2
      0001E7 24r00            [12] 1124 	add	a,#_Font5x7
      0001E9 F5 82            [12] 1125 	mov	dpl,a
      0001EB EB               [12] 1126 	mov	a,r3
      0001EC 34s00            [12] 1127 	addc	a,#(_Font5x7 >> 8)
      0001EE F5 83            [12] 1128 	mov	dph,a
      0001F0 E4               [12] 1129 	clr	a
      0001F1 93               [24] 1130 	movc	a,@a+dptr
      0001F2 30 E6 06         [24] 1131 	jnb	acc.6,00120$
      0001F5 7A 02            [12] 1132 	mov	r2,#0x02
      0001F7 7B 00            [12] 1133 	mov	r3,#0x00
      0001F9 80 04            [24] 1134 	sjmp	00121$
      0001FB                       1135 00120$:
      0001FB 7A 00            [12] 1136 	mov	r2,#0x00
      0001FD 7B 00            [12] 1137 	mov	r3,#0x00
      0001FF                       1138 00121$:
      0001FF EA               [12] 1139 	mov	a,r2
      000200 2C               [12] 1140 	add	a,r4
      000201 FC               [12] 1141 	mov	r4,a
                           000202  1142 	C$LatticeScreen.c$230$3_1$48 ==.
                                   1143 ;	LatticeScreen.c:230: ((Font5x7[font_pos+i]&(1<<7))?(1<<0):(0));
      000202 8D 02            [24] 1144 	mov	ar2,r5
      000204 7B 00            [12] 1145 	mov	r3,#0x00
      000206 EA               [12] 1146 	mov	a,r2
      000207 2E               [12] 1147 	add	a,r6
      000208 FA               [12] 1148 	mov	r2,a
      000209 EB               [12] 1149 	mov	a,r3
      00020A 3F               [12] 1150 	addc	a,r7
      00020B FB               [12] 1151 	mov	r3,a
      00020C EA               [12] 1152 	mov	a,r2
      00020D 24r00            [12] 1153 	add	a,#_Font5x7
      00020F F5 82            [12] 1154 	mov	dpl,a
      000211 EB               [12] 1155 	mov	a,r3
      000212 34s00            [12] 1156 	addc	a,#(_Font5x7 >> 8)
      000214 F5 83            [12] 1157 	mov	dph,a
      000216 E4               [12] 1158 	clr	a
      000217 93               [24] 1159 	movc	a,@a+dptr
      000218 30 E7 06         [24] 1160 	jnb	acc.7,00122$
      00021B 7A 01            [12] 1161 	mov	r2,#0x01
      00021D 7B 00            [12] 1162 	mov	r3,#0x00
      00021F 80 04            [24] 1163 	sjmp	00123$
      000221                       1164 00122$:
      000221 7A 00            [12] 1165 	mov	r2,#0x00
      000223 7B 00            [12] 1166 	mov	r3,#0x00
      000225                       1167 00123$:
      000225 EA               [12] 1168 	mov	a,r2
      000226 2C               [12] 1169 	add	a,r4
      000227 F7               [12] 1170 	mov	@r1,a
                           000228  1171 	C$LatticeScreen.c$218$2_1$47 ==.
                                   1172 ;	LatticeScreen.c:218: for(i=0;i<5;i++)
      000228 0D               [12] 1173 	inc	r5
      000229 BD 05 00         [24] 1174 	cjne	r5,#0x05,00174$
      00022C                       1175 00174$:
      00022C 50 03            [24] 1176 	jnc	00175$
      00022E 02r00rF3         [24] 1177 	ljmp	00104$
      000231                       1178 00175$:
      000231                       1179 00106$:
                           000231  1180 	C$LatticeScreen.c$234$2_1$45 ==.
                                   1181 ;	LatticeScreen.c:234: }
                           000231  1182 	C$LatticeScreen.c$234$2_1$45 ==.
                           000231  1183 	XG$LS_Show_Char_Font5x7$0$0 ==.
      000231 22               [24] 1184 	ret
                                   1185 ;------------------------------------------------------------
                                   1186 ;Allocation info for local variables in function 'systick_init'
                                   1187 ;------------------------------------------------------------
                                   1188 ;AUXR                      Allocated with name '_systick_init_AUXR_65536_49'
                                   1189 ;P3M1                      Allocated with name '_systick_init_P3M1_65537_50'
                                   1190 ;P3M0                      Allocated with name '_systick_init_P3M0_65537_50'
                                   1191 ;------------------------------------------------------------
                           000232  1192 	G$systick_init$0$0 ==.
                           000232  1193 	C$main.c$25$2_1$49 ==.
                                   1194 ;	main.c:25: void systick_init()
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function systick_init
                                   1197 ;	-----------------------------------------
      000232                       1198 _systick_init:
                           000232  1199 	C$main.c$28$1_0$49 ==.
                                   1200 ;	main.c:28: AUXR |= 0x80;                   //定时器0为1T模式
      000232 43 8E 80         [24] 1201 	orl	_systick_init_AUXR_65536_49,#0x80
                           000235  1202 	C$main.c$29$1_0$49 ==.
                                   1203 ;	main.c:29: TMOD &= ~0x0f;                    //设置定时器为模式0(16位自动重装载)
      000235 53 89 F0         [24] 1204 	anl	_TMOD,#0xf0
                           000238  1205 	C$main.c$30$1_0$49 ==.
                                   1206 ;	main.c:30: TL0 = T1MS;                     //初始化计时值
      000238 75 8A 67         [24] 1207 	mov	_TL0,#0x67
                           00023B  1208 	C$main.c$31$1_0$49 ==.
                                   1209 ;	main.c:31: TH0 = T1MS >> 8;
      00023B 75 8C 7E         [24] 1210 	mov	_TH0,#0x7e
                           00023E  1211 	C$main.c$32$1_0$49 ==.
                                   1212 ;	main.c:32: TR0 = 1;                        //定时器0开始计时
                                   1213 ;	assignBit
      00023E D2 8C            [12] 1214 	setb	_TR0
                           000240  1215 	C$main.c$33$1_0$49 ==.
                                   1216 ;	main.c:33: ET0 = 1;                        //使能定时器0中断
                                   1217 ;	assignBit
      000240 D2 A9            [12] 1218 	setb	_ET0
                           000242  1219 	C$main.c$34$1_0$49 ==.
                                   1220 ;	main.c:34: EA = 1;
                                   1221 ;	assignBit
      000242 D2 AF            [12] 1222 	setb	_EA
                           000244  1223 	C$main.c$39$1_1$50 ==.
                                   1224 ;	main.c:39: P3M1&=~(1<<3);
      000244 53 B1 F7         [24] 1225 	anl	_systick_init_P3M1_65537_50,#0xf7
                           000247  1226 	C$main.c$40$1_1$50 ==.
                                   1227 ;	main.c:40: P3M0|=(1<<3);
      000247 43 B2 08         [24] 1228 	orl	_systick_init_P3M0_65537_50,#0x08
                           00024A  1229 	C$main.c$42$1_1$49 ==.
                                   1230 ;	main.c:42: }
                           00024A  1231 	C$main.c$42$1_1$49 ==.
                           00024A  1232 	XG$systick_init$0$0 ==.
      00024A 22               [24] 1233 	ret
                                   1234 ;------------------------------------------------------------
                                   1235 ;Allocation info for local variables in function 'systick_interrupt'
                                   1236 ;------------------------------------------------------------
                                   1237 ;sloc0                     Allocated with name '_systick_interrupt_sloc0_1_0'
                                   1238 ;------------------------------------------------------------
                           00024B  1239 	G$systick_interrupt$0$0 ==.
                           00024B  1240 	C$main.c$49$1_1$52 ==.
                                   1241 ;	main.c:49: void systick_interrupt() __interrupt (1) __using (1) 
                                   1242 ;	-----------------------------------------
                                   1243 ;	 function systick_interrupt
                                   1244 ;	-----------------------------------------
      00024B                       1245 _systick_interrupt:
                           00000F  1246 	ar7 = 0x0f
                           00000E  1247 	ar6 = 0x0e
                           00000D  1248 	ar5 = 0x0d
                           00000C  1249 	ar4 = 0x0c
                           00000B  1250 	ar3 = 0x0b
                           00000A  1251 	ar2 = 0x0a
                           000009  1252 	ar1 = 0x09
                           000008  1253 	ar0 = 0x08
      00024B C0*00            [24] 1254 	push	bits
      00024D C0 E0            [24] 1255 	push	acc
      00024F C0 F0            [24] 1256 	push	b
      000251 C0 82            [24] 1257 	push	dpl
      000253 C0 83            [24] 1258 	push	dph
      000255 C0 07            [24] 1259 	push	(0+7)
      000257 C0 06            [24] 1260 	push	(0+6)
      000259 C0 05            [24] 1261 	push	(0+5)
      00025B C0 04            [24] 1262 	push	(0+4)
      00025D C0 03            [24] 1263 	push	(0+3)
      00025F C0 02            [24] 1264 	push	(0+2)
      000261 C0 01            [24] 1265 	push	(0+1)
      000263 C0 00            [24] 1266 	push	(0+0)
      000265 C0 D0            [24] 1267 	push	psw
      000267 75 D0 08         [24] 1268 	mov	psw,#0x08
                           00026A  1269 	C$main.c$51$1_0$52 ==.
                                   1270 ;	main.c:51: systick++;
      00026A 78r09            [12] 1271 	mov	r0,#_systick
      00026C 06               [12] 1272 	inc	@r0
      00026D B6 00 20         [24] 1273 	cjne	@r0,#0x00,00115$
      000270 08               [12] 1274 	inc	r0
      000271 06               [12] 1275 	inc	@r0
      000272 B6 00 1B         [24] 1276 	cjne	@r0,#0x00,00115$
      000275 08               [12] 1277 	inc	r0
      000276 06               [12] 1278 	inc	@r0
      000277 B6 00 16         [24] 1279 	cjne	@r0,#0x00,00115$
      00027A 08               [12] 1280 	inc	r0
      00027B 06               [12] 1281 	inc	@r0
      00027C B6 00 11         [24] 1282 	cjne	@r0,#0x00,00115$
      00027F 08               [12] 1283 	inc	r0
      000280 06               [12] 1284 	inc	@r0
      000281 B6 00 0C         [24] 1285 	cjne	@r0,#0x00,00115$
      000284 08               [12] 1286 	inc	r0
      000285 06               [12] 1287 	inc	@r0
      000286 B6 00 07         [24] 1288 	cjne	@r0,#0x00,00115$
      000289 08               [12] 1289 	inc	r0
      00028A 06               [12] 1290 	inc	@r0
      00028B B6 00 02         [24] 1291 	cjne	@r0,#0x00,00115$
      00028E 08               [12] 1292 	inc	r0
      00028F 06               [12] 1293 	inc	@r0
      000290                       1294 00115$:
                           000290  1295 	C$main.c$52$1_0$52 ==.
                                   1296 ;	main.c:52: if(Uart_Receive_Buff_Index!=0)
      000290 78r51            [12] 1297 	mov	r0,#_Uart_Receive_Buff_Index
      000292 E6               [12] 1298 	mov	a,@r0
      000293 60 65            [24] 1299 	jz	00104$
                           000295  1300 	C$main.c$54$2_0$53 ==.
                                   1301 ;	main.c:54: if(systick>Last_Receive_Tick+1)
      000295 78r52            [12] 1302 	mov	r0,#_Last_Receive_Tick
      000297 74 01            [12] 1303 	mov	a,#0x01
      000299 26               [12] 1304 	add	a,@r0
      00029A F5*02            [12] 1305 	mov	_systick_interrupt_sloc0_1_0,a
      00029C E4               [12] 1306 	clr	a
      00029D 08               [12] 1307 	inc	r0
      00029E 36               [12] 1308 	addc	a,@r0
      00029F F5*03            [12] 1309 	mov	(_systick_interrupt_sloc0_1_0 + 1),a
      0002A1 E4               [12] 1310 	clr	a
      0002A2 08               [12] 1311 	inc	r0
      0002A3 36               [12] 1312 	addc	a,@r0
      0002A4 F5*04            [12] 1313 	mov	(_systick_interrupt_sloc0_1_0 + 2),a
      0002A6 E4               [12] 1314 	clr	a
      0002A7 08               [12] 1315 	inc	r0
      0002A8 36               [12] 1316 	addc	a,@r0
      0002A9 F5*05            [12] 1317 	mov	(_systick_interrupt_sloc0_1_0 + 3),a
      0002AB E4               [12] 1318 	clr	a
      0002AC 08               [12] 1319 	inc	r0
      0002AD 36               [12] 1320 	addc	a,@r0
      0002AE F5*06            [12] 1321 	mov	(_systick_interrupt_sloc0_1_0 + 4),a
      0002B0 E4               [12] 1322 	clr	a
      0002B1 08               [12] 1323 	inc	r0
      0002B2 36               [12] 1324 	addc	a,@r0
      0002B3 F5*07            [12] 1325 	mov	(_systick_interrupt_sloc0_1_0 + 5),a
      0002B5 E4               [12] 1326 	clr	a
      0002B6 08               [12] 1327 	inc	r0
      0002B7 36               [12] 1328 	addc	a,@r0
      0002B8 F5*08            [12] 1329 	mov	(_systick_interrupt_sloc0_1_0 + 6),a
      0002BA E4               [12] 1330 	clr	a
      0002BB 08               [12] 1331 	inc	r0
      0002BC 36               [12] 1332 	addc	a,@r0
      0002BD F5*09            [12] 1333 	mov	(_systick_interrupt_sloc0_1_0 + 7),a
      0002BF 78r09            [12] 1334 	mov	r0,#_systick
      0002C1 C3               [12] 1335 	clr	c
      0002C2 E5*02            [12] 1336 	mov	a,_systick_interrupt_sloc0_1_0
      0002C4 96               [12] 1337 	subb	a,@r0
      0002C5 E5*03            [12] 1338 	mov	a,(_systick_interrupt_sloc0_1_0 + 1)
      0002C7 08               [12] 1339 	inc	r0
      0002C8 96               [12] 1340 	subb	a,@r0
      0002C9 E5*04            [12] 1341 	mov	a,(_systick_interrupt_sloc0_1_0 + 2)
      0002CB 08               [12] 1342 	inc	r0
      0002CC 96               [12] 1343 	subb	a,@r0
      0002CD E5*05            [12] 1344 	mov	a,(_systick_interrupt_sloc0_1_0 + 3)
      0002CF 08               [12] 1345 	inc	r0
      0002D0 96               [12] 1346 	subb	a,@r0
      0002D1 E5*06            [12] 1347 	mov	a,(_systick_interrupt_sloc0_1_0 + 4)
      0002D3 08               [12] 1348 	inc	r0
      0002D4 96               [12] 1349 	subb	a,@r0
      0002D5 E5*07            [12] 1350 	mov	a,(_systick_interrupt_sloc0_1_0 + 5)
      0002D7 08               [12] 1351 	inc	r0
      0002D8 96               [12] 1352 	subb	a,@r0
      0002D9 E5*08            [12] 1353 	mov	a,(_systick_interrupt_sloc0_1_0 + 6)
      0002DB 08               [12] 1354 	inc	r0
      0002DC 96               [12] 1355 	subb	a,@r0
      0002DD E5*09            [12] 1356 	mov	a,(_systick_interrupt_sloc0_1_0 + 7)
      0002DF 08               [12] 1357 	inc	r0
      0002E0 96               [12] 1358 	subb	a,@r0
      0002E1 50 17            [24] 1359 	jnc	00104$
                           0002E3  1360 	C$main.c$56$3_0$54 ==.
                                   1361 ;	main.c:56: On_Uart_Idle(Uart_Receive_Buff,Uart_Receive_Buff_Index);
      0002E3 78r51            [12] 1362 	mov	r0,#_Uart_Receive_Buff_Index
      0002E5 86*0A            [24] 1363 	mov	_On_Uart_Idle_PARM_2,@r0
      0002E7 75*0B 00         [24] 1364 	mov	(_On_Uart_Idle_PARM_2 + 1),#0x00
      0002EA 75 82r11         [24] 1365 	mov	dpl,#_Uart_Receive_Buff
      0002ED 75 D0 00         [24] 1366 	mov	psw,#0x00
      0002F0 12r04r4B         [24] 1367 	lcall	_On_Uart_Idle
      0002F3 75 D0 08         [24] 1368 	mov	psw,#0x08
                           0002F6  1369 	C$main.c$57$3_0$54 ==.
                                   1370 ;	main.c:57: Uart_Receive_Buff_Index=0;
      0002F6 78r51            [12] 1371 	mov	r0,#_Uart_Receive_Buff_Index
      0002F8 76 00            [12] 1372 	mov	@r0,#0x00
      0002FA                       1373 00104$:
                           0002FA  1374 	C$main.c$61$1_0$52 ==.
                                   1375 ;	main.c:61: P3_3=!P3_3;
      0002FA B2 B3            [12] 1376 	cpl	_P3_3
                           0002FC  1377 	C$main.c$63$1_0$52 ==.
                                   1378 ;	main.c:63: On_SysTick_Timer();
      0002FC 75 D0 00         [24] 1379 	mov	psw,#0x00
      0002FF 12r04r47         [24] 1380 	lcall	_On_SysTick_Timer
      000302 75 D0 08         [24] 1381 	mov	psw,#0x08
                           000305  1382 	C$main.c$64$1_0$52 ==.
                                   1383 ;	main.c:64: }
      000305 D0 D0            [24] 1384 	pop	psw
      000307 D0 00            [24] 1385 	pop	(0+0)
      000309 D0 01            [24] 1386 	pop	(0+1)
      00030B D0 02            [24] 1387 	pop	(0+2)
      00030D D0 03            [24] 1388 	pop	(0+3)
      00030F D0 04            [24] 1389 	pop	(0+4)
      000311 D0 05            [24] 1390 	pop	(0+5)
      000313 D0 06            [24] 1391 	pop	(0+6)
      000315 D0 07            [24] 1392 	pop	(0+7)
      000317 D0 83            [24] 1393 	pop	dph
      000319 D0 82            [24] 1394 	pop	dpl
      00031B D0 F0            [24] 1395 	pop	b
      00031D D0 E0            [24] 1396 	pop	acc
      00031F D0*00            [24] 1397 	pop	bits
                           000321  1398 	C$main.c$64$1_0$52 ==.
                           000321  1399 	XG$systick_interrupt$0$0 ==.
      000321 32               [24] 1400 	reti
                                   1401 ;------------------------------------------------------------
                                   1402 ;Allocation info for local variables in function 'Uart_Init'
                                   1403 ;------------------------------------------------------------
                                   1404 ;AUXR                      Allocated with name '_Uart_Init_AUXR_65536_55'
                                   1405 ;T2H                       Allocated with name '_Uart_Init_T2H_65536_55'
                                   1406 ;T2L                       Allocated with name '_Uart_Init_T2L_65536_55'
                                   1407 ;P_SW1                     Allocated with name '_Uart_Init_P_SW1_65536_55'
                                   1408 ;------------------------------------------------------------
                           000322  1409 	G$Uart_Init$0$0 ==.
                           000322  1410 	C$main.c$78$1_0$55 ==.
                                   1411 ;	main.c:78: void Uart_Init()
                                   1412 ;	-----------------------------------------
                                   1413 ;	 function Uart_Init
                                   1414 ;	-----------------------------------------
      000322                       1415 _Uart_Init:
                           000007  1416 	ar7 = 0x07
                           000006  1417 	ar6 = 0x06
                           000005  1418 	ar5 = 0x05
                           000004  1419 	ar4 = 0x04
                           000003  1420 	ar3 = 0x03
                           000002  1421 	ar2 = 0x02
                           000001  1422 	ar1 = 0x01
                           000000  1423 	ar0 = 0x00
                           000322  1424 	C$main.c$84$1_0$55 ==.
                                   1425 ;	main.c:84: ACC = P_SW1;
      000322 85 A2 E0         [24] 1426 	mov	_ACC,_Uart_Init_P_SW1_65536_55
                           000325  1427 	C$main.c$85$1_0$55 ==.
                                   1428 ;	main.c:85: ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
      000325 53 E0 3F         [24] 1429 	anl	_ACC,#0x3f
                           000328  1430 	C$main.c$86$1_0$55 ==.
                                   1431 ;	main.c:86: P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
      000328 85 E0 A2         [24] 1432 	mov	_Uart_Init_P_SW1_65536_55,_ACC
                           00032B  1433 	C$main.c$98$1_0$55 ==.
                                   1434 ;	main.c:98: SCON = 0x50;                //8位可变波特率
      00032B 75 98 50         [24] 1435 	mov	_SCON,#0x50
                           00032E  1436 	C$main.c$105$1_0$55 ==.
                                   1437 ;	main.c:105: T2L = (65536 - (FOSC/4/BAUD)) & 0xff;   //设置波特率重装值
      00032E 75 D7 B8         [24] 1438 	mov	_Uart_Init_T2L_65536_55,#0xb8
                           000331  1439 	C$main.c$106$1_0$55 ==.
                                   1440 ;	main.c:106: T2H = (65536 - (FOSC/4/BAUD))>>8;
      000331 75 D6 FF         [24] 1441 	mov	_Uart_Init_T2H_65536_55,#0xff
                           000334  1442 	C$main.c$107$1_0$55 ==.
                                   1443 ;	main.c:107: AUXR |= 0x14;                //T2为1T模式, 并启动定时器2
      000334 43 8E 14         [24] 1444 	orl	_Uart_Init_AUXR_65536_55,#0x14
                           000337  1445 	C$main.c$108$1_0$55 ==.
                                   1446 ;	main.c:108: AUXR |= 0x01;               //选择定时器2为串口1的波特率发生器
      000337 43 8E 01         [24] 1447 	orl	_Uart_Init_AUXR_65536_55,#0x01
                           00033A  1448 	C$main.c$109$1_0$55 ==.
                                   1449 ;	main.c:109: ES = 1;                     //使能串口1中断
                                   1450 ;	assignBit
      00033A D2 AC            [12] 1451 	setb	_ES
                           00033C  1452 	C$main.c$110$1_0$55 ==.
                                   1453 ;	main.c:110: EA = 1;
                                   1454 ;	assignBit
      00033C D2 AF            [12] 1455 	setb	_EA
                           00033E  1456 	C$main.c$111$1_0$55 ==.
                                   1457 ;	main.c:111: }
                           00033E  1458 	C$main.c$111$1_0$55 ==.
                           00033E  1459 	XG$Uart_Init$0$0 ==.
      00033E 22               [24] 1460 	ret
                                   1461 ;------------------------------------------------------------
                                   1462 ;Allocation info for local variables in function 'Uart_Send'
                                   1463 ;------------------------------------------------------------
                                   1464 ;data                      Allocated to registers r7 
                                   1465 ;------------------------------------------------------------
                           00033F  1466 	G$Uart_Send$0$0 ==.
                           00033F  1467 	C$main.c$112$1_0$57 ==.
                                   1468 ;	main.c:112: void Uart_Send(uint8_t data)
                                   1469 ;	-----------------------------------------
                                   1470 ;	 function Uart_Send
                                   1471 ;	-----------------------------------------
      00033F                       1472 _Uart_Send:
      00033F AF 82            [24] 1473 	mov	r7,dpl
                           000341  1474 	C$main.c$114$1_0$57 ==.
                                   1475 ;	main.c:114: while(Tx_Busy);//串口发送忙标志
      000341                       1476 00101$:
      000341 20*00 FD         [24] 1477 	jb	_Tx_Busy,00101$
                           000344  1478 	C$main.c$115$1_0$57 ==.
                                   1479 ;	main.c:115: ACC = data;                  //获取校验位P (PSW.0)
      000344 8F E0            [24] 1480 	mov	_ACC,r7
                           000346  1481 	C$main.c$116$1_0$57 ==.
                                   1482 ;	main.c:116: if (P)                      //根据P来设置校验位
      000346 A2 D0            [12] 1483 	mov	c,_P
                           000348  1484 	C$main.c$132$1_0$57 ==.
                                   1485 ;	main.c:132: Tx_Busy = 1;
                                   1486 ;	assignBit
      000348 D2*00            [12] 1487 	setb	_Tx_Busy
                           00034A  1488 	C$main.c$133$1_0$57 ==.
                                   1489 ;	main.c:133: SBUF = ACC;                 //写数据到UART数据寄存器	
      00034A 85 E0 99         [24] 1490 	mov	_SBUF,_ACC
                           00034D  1491 	C$main.c$134$1_0$57 ==.
                                   1492 ;	main.c:134: }
                           00034D  1493 	C$main.c$134$1_0$57 ==.
                           00034D  1494 	XG$Uart_Send$0$0 ==.
      00034D 22               [24] 1495 	ret
                                   1496 ;------------------------------------------------------------
                                   1497 ;Allocation info for local variables in function 'Uart_Interrupt'
                                   1498 ;------------------------------------------------------------
                           00034E  1499 	G$Uart_Interrupt$0$0 ==.
                           00034E  1500 	C$main.c$138$1_0$61 ==.
                                   1501 ;	main.c:138: void Uart_Interrupt() __interrupt(4)
                                   1502 ;	-----------------------------------------
                                   1503 ;	 function Uart_Interrupt
                                   1504 ;	-----------------------------------------
      00034E                       1505 _Uart_Interrupt:
      00034E C0*00            [24] 1506 	push	bits
      000350 C0 E0            [24] 1507 	push	acc
      000352 C0 F0            [24] 1508 	push	b
      000354 C0 82            [24] 1509 	push	dpl
      000356 C0 83            [24] 1510 	push	dph
      000358 C0 07            [24] 1511 	push	(0+7)
      00035A C0 06            [24] 1512 	push	(0+6)
      00035C C0 05            [24] 1513 	push	(0+5)
      00035E C0 04            [24] 1514 	push	(0+4)
      000360 C0 03            [24] 1515 	push	(0+3)
      000362 C0 02            [24] 1516 	push	(0+2)
      000364 C0 01            [24] 1517 	push	(0+1)
      000366 C0 00            [24] 1518 	push	(0+0)
      000368 C0 D0            [24] 1519 	push	psw
      00036A 75 D0 00         [24] 1520 	mov	psw,#0x00
                           00036D  1521 	C$main.c$140$1_0$61 ==.
                                   1522 ;	main.c:140: if(TI)
                           00036D  1523 	C$main.c$142$2_0$62 ==.
                                   1524 ;	main.c:142: TI=0;
                                   1525 ;	assignBit
      00036D 10 99 02         [24] 1526 	jbc	_TI,00121$
      000370 80 02            [24] 1527 	sjmp	00102$
      000372                       1528 00121$:
                           000372  1529 	C$main.c$143$2_0$62 ==.
                                   1530 ;	main.c:143: Tx_Busy=0;
                                   1531 ;	assignBit
      000372 C2*00            [12] 1532 	clr	_Tx_Busy
      000374                       1533 00102$:
                           000374  1534 	C$main.c$145$1_0$61 ==.
                                   1535 ;	main.c:145: if(RI)
      000374 30 98 4A         [24] 1536 	jnb	_RI,00107$
                           000377  1537 	C$main.c$159$2_0$63 ==.
                                   1538 ;	main.c:159: Uart_Receive_Buff[Uart_Receive_Buff_Index++]=SBUF;
      000377 78r51            [12] 1539 	mov	r0,#_Uart_Receive_Buff_Index
      000379 86 07            [24] 1540 	mov	ar7,@r0
      00037B 78r51            [12] 1541 	mov	r0,#_Uart_Receive_Buff_Index
      00037D EF               [12] 1542 	mov	a,r7
      00037E 04               [12] 1543 	inc	a
      00037F F6               [12] 1544 	mov	@r0,a
      000380 EF               [12] 1545 	mov	a,r7
      000381 24r11            [12] 1546 	add	a,#_Uart_Receive_Buff
      000383 F8               [12] 1547 	mov	r0,a
      000384 A6 99            [24] 1548 	mov	@r0,_SBUF
                           000386  1549 	C$main.c$160$2_0$63 ==.
                                   1550 ;	main.c:160: if(Uart_Receive_Buff_Index>=sizeof(Uart_Receive_Buff))
      000386 78r51            [12] 1551 	mov	r0,#_Uart_Receive_Buff_Index
      000388 B6 40 00         [24] 1552 	cjne	@r0,#0x40,00123$
      00038B                       1553 00123$:
      00038B 40 10            [24] 1554 	jc	00104$
                           00038D  1555 	C$main.c$162$3_0$64 ==.
                                   1556 ;	main.c:162: On_Uart_Buff_Full(Uart_Receive_Buff,sizeof(Uart_Receive_Buff));
      00038D 75*0C 40         [24] 1557 	mov	_On_Uart_Buff_Full_PARM_2,#0x40
      000390 75*0D 00         [24] 1558 	mov	(_On_Uart_Buff_Full_PARM_2 + 1),#0x00
      000393 75 82r11         [24] 1559 	mov	dpl,#_Uart_Receive_Buff
      000396 12r04r6E         [24] 1560 	lcall	_On_Uart_Buff_Full
                           000399  1561 	C$main.c$163$3_0$64 ==.
                                   1562 ;	main.c:163: Uart_Receive_Buff_Index=0;
      000399 78r51            [12] 1563 	mov	r0,#_Uart_Receive_Buff_Index
      00039B 76 00            [12] 1564 	mov	@r0,#0x00
      00039D                       1565 00104$:
                           00039D  1566 	C$main.c$165$2_0$63 ==.
                                   1567 ;	main.c:165: Last_Receive_Tick=systick;
      00039D 78r09            [12] 1568 	mov	r0,#_systick
      00039F 79r52            [12] 1569 	mov	r1,#_Last_Receive_Tick
      0003A1 E6               [12] 1570 	mov	a,@r0
      0003A2 F7               [12] 1571 	mov	@r1,a
      0003A3 08               [12] 1572 	inc	r0
      0003A4 09               [12] 1573 	inc	r1
      0003A5 E6               [12] 1574 	mov	a,@r0
      0003A6 F7               [12] 1575 	mov	@r1,a
      0003A7 08               [12] 1576 	inc	r0
      0003A8 09               [12] 1577 	inc	r1
      0003A9 E6               [12] 1578 	mov	a,@r0
      0003AA F7               [12] 1579 	mov	@r1,a
      0003AB 08               [12] 1580 	inc	r0
      0003AC 09               [12] 1581 	inc	r1
      0003AD E6               [12] 1582 	mov	a,@r0
      0003AE F7               [12] 1583 	mov	@r1,a
      0003AF 08               [12] 1584 	inc	r0
      0003B0 09               [12] 1585 	inc	r1
      0003B1 E6               [12] 1586 	mov	a,@r0
      0003B2 F7               [12] 1587 	mov	@r1,a
      0003B3 08               [12] 1588 	inc	r0
      0003B4 09               [12] 1589 	inc	r1
      0003B5 E6               [12] 1590 	mov	a,@r0
      0003B6 F7               [12] 1591 	mov	@r1,a
      0003B7 08               [12] 1592 	inc	r0
      0003B8 09               [12] 1593 	inc	r1
      0003B9 E6               [12] 1594 	mov	a,@r0
      0003BA F7               [12] 1595 	mov	@r1,a
      0003BB 08               [12] 1596 	inc	r0
      0003BC 09               [12] 1597 	inc	r1
      0003BD E6               [12] 1598 	mov	a,@r0
      0003BE F7               [12] 1599 	mov	@r1,a
                           0003BF  1600 	C$main.c$166$2_0$63 ==.
                                   1601 ;	main.c:166: RI=0;
                                   1602 ;	assignBit
      0003BF C2 98            [12] 1603 	clr	_RI
      0003C1                       1604 00107$:
                           0003C1  1605 	C$main.c$168$1_0$61 ==.
                                   1606 ;	main.c:168: }
      0003C1 D0 D0            [24] 1607 	pop	psw
      0003C3 D0 00            [24] 1608 	pop	(0+0)
      0003C5 D0 01            [24] 1609 	pop	(0+1)
      0003C7 D0 02            [24] 1610 	pop	(0+2)
      0003C9 D0 03            [24] 1611 	pop	(0+3)
      0003CB D0 04            [24] 1612 	pop	(0+4)
      0003CD D0 05            [24] 1613 	pop	(0+5)
      0003CF D0 06            [24] 1614 	pop	(0+6)
      0003D1 D0 07            [24] 1615 	pop	(0+7)
      0003D3 D0 83            [24] 1616 	pop	dph
      0003D5 D0 82            [24] 1617 	pop	dpl
      0003D7 D0 F0            [24] 1618 	pop	b
      0003D9 D0 E0            [24] 1619 	pop	acc
      0003DB D0*00            [24] 1620 	pop	bits
                           0003DD  1621 	C$main.c$168$1_0$61 ==.
                           0003DD  1622 	XG$Uart_Interrupt$0$0 ==.
      0003DD 32               [24] 1623 	reti
                                   1624 ;------------------------------------------------------------
                                   1625 ;Allocation info for local variables in function 'Clk_In_Init'
                                   1626 ;------------------------------------------------------------
                                   1627 ;P3M1                      Allocated with name '_Clk_In_Init_P3M1_65536_65'
                                   1628 ;P3M0                      Allocated with name '_Clk_In_Init_P3M0_65536_65'
                                   1629 ;------------------------------------------------------------
                           0003DE  1630 	G$Clk_In_Init$0$0 ==.
                           0003DE  1631 	C$main.c$170$1_0$65 ==.
                                   1632 ;	main.c:170: void Clk_In_Init()
                                   1633 ;	-----------------------------------------
                                   1634 ;	 function Clk_In_Init
                                   1635 ;	-----------------------------------------
      0003DE                       1636 _Clk_In_Init:
                           0003DE  1637 	C$main.c$175$1_0$65 ==.
                                   1638 ;	main.c:175: P3M1&=~(1<<2);
      0003DE 53 B1 FB         [24] 1639 	anl	_Clk_In_Init_P3M1_65536_65,#0xfb
                           0003E1  1640 	C$main.c$176$1_0$65 ==.
                                   1641 ;	main.c:176: P3M0&=~(1<<2);
      0003E1 53 B2 FB         [24] 1642 	anl	_Clk_In_Init_P3M0_65536_65,#0xfb
                           0003E4  1643 	C$main.c$178$1_0$65 ==.
                                   1644 ;	main.c:178: P3_2=1;//准双向口输出高电平
                                   1645 ;	assignBit
      0003E4 D2 B2            [12] 1646 	setb	_P3_2
                           0003E6  1647 	C$main.c$180$1_0$65 ==.
                                   1648 ;	main.c:180: INT0 = 1;
                                   1649 ;	assignBit
      0003E6 D2 B2            [12] 1650 	setb	_INT0
                           0003E8  1651 	C$main.c$181$1_0$65 ==.
                                   1652 ;	main.c:181: IT0 = 0;                    //设置INT0的中断类型 (1:仅下降沿 0:上升沿和下降沿)
                                   1653 ;	assignBit
      0003E8 C2 88            [12] 1654 	clr	_IT0
                           0003EA  1655 	C$main.c$182$1_0$65 ==.
                                   1656 ;	main.c:182: EX0 = 1;                    //使能INT0中断
                                   1657 ;	assignBit
      0003EA D2 A8            [12] 1658 	setb	_EX0
                           0003EC  1659 	C$main.c$183$1_0$65 ==.
                                   1660 ;	main.c:183: EA = 1;
                                   1661 ;	assignBit
      0003EC D2 AF            [12] 1662 	setb	_EA
                           0003EE  1663 	C$main.c$185$1_0$65 ==.
                                   1664 ;	main.c:185: }
                           0003EE  1665 	C$main.c$185$1_0$65 ==.
                           0003EE  1666 	XG$Clk_In_Init$0$0 ==.
      0003EE 22               [24] 1667 	ret
                                   1668 ;------------------------------------------------------------
                                   1669 ;Allocation info for local variables in function 'Clk_In_Interrupt'
                                   1670 ;------------------------------------------------------------
                           0003EF  1671 	G$Clk_In_Interrupt$0$0 ==.
                           0003EF  1672 	C$main.c$187$1_0$66 ==.
                                   1673 ;	main.c:187: void Clk_In_Interrupt() __interrupt (0)
                                   1674 ;	-----------------------------------------
                                   1675 ;	 function Clk_In_Interrupt
                                   1676 ;	-----------------------------------------
      0003EF                       1677 _Clk_In_Interrupt:
      0003EF C0*00            [24] 1678 	push	bits
      0003F1 C0 E0            [24] 1679 	push	acc
      0003F3 C0 F0            [24] 1680 	push	b
      0003F5 C0 82            [24] 1681 	push	dpl
      0003F7 C0 83            [24] 1682 	push	dph
      0003F9 C0 07            [24] 1683 	push	(0+7)
      0003FB C0 06            [24] 1684 	push	(0+6)
      0003FD C0 05            [24] 1685 	push	(0+5)
      0003FF C0 04            [24] 1686 	push	(0+4)
      000401 C0 03            [24] 1687 	push	(0+3)
      000403 C0 02            [24] 1688 	push	(0+2)
      000405 C0 01            [24] 1689 	push	(0+1)
      000407 C0 00            [24] 1690 	push	(0+0)
      000409 C0 D0            [24] 1691 	push	psw
      00040B 75 D0 00         [24] 1692 	mov	psw,#0x00
                           00040E  1693 	C$main.c$189$1_0$66 ==.
                                   1694 ;	main.c:189: if(TR0)//当T0作为系统主时间时，停止T0,重置系统主时间
                           00040E  1695 	C$main.c$191$2_0$67 ==.
                                   1696 ;	main.c:191: TR0=0;//关闭定时器0
                                   1697 ;	assignBit
      00040E 10 8C 02         [24] 1698 	jbc	_TR0,00109$
      000411 80 14            [24] 1699 	sjmp	00102$
      000413                       1700 00109$:
                           000413  1701 	C$main.c$192$2_0$67 ==.
                                   1702 ;	main.c:192: ET0=0;//关闭定时器0中断
                                   1703 ;	assignBit
      000413 C2 A9            [12] 1704 	clr	_ET0
                           000415  1705 	C$main.c$193$2_0$67 ==.
                                   1706 ;	main.c:193: systick=0;//清零系统主时间
      000415 78r09            [12] 1707 	mov	r0,#_systick
      000417 E4               [12] 1708 	clr	a
      000418 F6               [12] 1709 	mov	@r0,a
      000419 08               [12] 1710 	inc	r0
      00041A F6               [12] 1711 	mov	@r0,a
      00041B 08               [12] 1712 	inc	r0
      00041C F6               [12] 1713 	mov	@r0,a
      00041D 08               [12] 1714 	inc	r0
      00041E F6               [12] 1715 	mov	@r0,a
      00041F 08               [12] 1716 	inc	r0
      000420 F6               [12] 1717 	mov	@r0,a
      000421 08               [12] 1718 	inc	r0
      000422 F6               [12] 1719 	mov	@r0,a
      000423 08               [12] 1720 	inc	r0
      000424 F6               [12] 1721 	mov	@r0,a
      000425 08               [12] 1722 	inc	r0
      000426 F6               [12] 1723 	mov	@r0,a
      000427                       1724 00102$:
                           000427  1725 	C$main.c$195$1_0$66 ==.
                                   1726 ;	main.c:195: systick_interrupt();//调用中断函数
      000427 12r02r4B         [24] 1727 	lcall	_systick_interrupt
                           00042A  1728 	C$main.c$196$1_0$66 ==.
                                   1729 ;	main.c:196: }
      00042A D0 D0            [24] 1730 	pop	psw
      00042C D0 00            [24] 1731 	pop	(0+0)
      00042E D0 01            [24] 1732 	pop	(0+1)
      000430 D0 02            [24] 1733 	pop	(0+2)
      000432 D0 03            [24] 1734 	pop	(0+3)
      000434 D0 04            [24] 1735 	pop	(0+4)
      000436 D0 05            [24] 1736 	pop	(0+5)
      000438 D0 06            [24] 1737 	pop	(0+6)
      00043A D0 07            [24] 1738 	pop	(0+7)
      00043C D0 83            [24] 1739 	pop	dph
      00043E D0 82            [24] 1740 	pop	dpl
      000440 D0 F0            [24] 1741 	pop	b
      000442 D0 E0            [24] 1742 	pop	acc
      000444 D0*00            [24] 1743 	pop	bits
                           000446  1744 	C$main.c$196$1_0$66 ==.
                           000446  1745 	XG$Clk_In_Interrupt$0$0 ==.
      000446 32               [24] 1746 	reti
                                   1747 ;------------------------------------------------------------
                                   1748 ;Allocation info for local variables in function 'On_SysTick_Timer'
                                   1749 ;------------------------------------------------------------
                           000447  1750 	G$On_SysTick_Timer$0$0 ==.
                           000447  1751 	C$main.c$200$1_0$68 ==.
                                   1752 ;	main.c:200: void On_SysTick_Timer()//系统的毫秒级定时器
                                   1753 ;	-----------------------------------------
                                   1754 ;	 function On_SysTick_Timer
                                   1755 ;	-----------------------------------------
      000447                       1756 _On_SysTick_Timer:
                           000447  1757 	C$main.c$202$1_0$68 ==.
                                   1758 ;	main.c:202: LS_Refresh();//刷新点阵屏	
      000447 12r00rA4         [24] 1759 	lcall	_LS_Refresh
                           00044A  1760 	C$main.c$203$1_0$68 ==.
                                   1761 ;	main.c:203: }
                           00044A  1762 	C$main.c$203$1_0$68 ==.
                           00044A  1763 	XG$On_SysTick_Timer$0$0 ==.
      00044A 22               [24] 1764 	ret
                                   1765 ;------------------------------------------------------------
                                   1766 ;Allocation info for local variables in function 'On_Uart_Idle'
                                   1767 ;------------------------------------------------------------
                                   1768 ;length                    Allocated with name '_On_Uart_Idle_PARM_2'
                                   1769 ;buff                      Allocated to registers r7 
                                   1770 ;i                         Allocated to registers r6 
                                   1771 ;------------------------------------------------------------
                           00044B  1772 	G$On_Uart_Idle$0$0 ==.
                           00044B  1773 	C$main.c$205$1_0$70 ==.
                                   1774 ;	main.c:205: void On_Uart_Idle(uint8_t __idata * buff,size_t length)//串口空闲的函数
                                   1775 ;	-----------------------------------------
                                   1776 ;	 function On_Uart_Idle
                                   1777 ;	-----------------------------------------
      00044B                       1778 _On_Uart_Idle:
      00044B AF 82            [24] 1779 	mov	r7,dpl
                           00044D  1780 	C$main.c$207$1_0$70 ==.
                                   1781 ;	main.c:207: if(length==8)//当长度为8时,直接复制数据到8X8点阵显示内存
      00044D 74 08            [12] 1782 	mov	a,#0x08
      00044F B5*0A 06         [24] 1783 	cjne	a,_On_Uart_Idle_PARM_2,00116$
      000452 E4               [12] 1784 	clr	a
      000453 B5*0B 02         [24] 1785 	cjne	a,(_On_Uart_Idle_PARM_2 + 1),00116$
      000456 80 02            [24] 1786 	sjmp	00117$
      000458                       1787 00116$:
      000458 80 13            [24] 1788 	sjmp	00106$
      00045A                       1789 00117$:
                           00045A  1790 	C$main.c$210$3_0$72 ==.
                                   1791 ;	main.c:210: for(i=0;i<8;i++)
      00045A 7E 00            [12] 1792 	mov	r6,#0x00
      00045C                       1793 00104$:
                           00045C  1794 	C$main.c$212$4_0$73 ==.
                                   1795 ;	main.c:212: LS_RAM[i]=buff[i];
      00045C EE               [12] 1796 	mov	a,r6
      00045D 24r00            [12] 1797 	add	a,#_LS_RAM
      00045F F9               [12] 1798 	mov	r1,a
      000460 EE               [12] 1799 	mov	a,r6
      000461 2F               [12] 1800 	add	a,r7
      000462 F8               [12] 1801 	mov	r0,a
      000463 86 05            [24] 1802 	mov	ar5,@r0
      000465 A7 05            [24] 1803 	mov	@r1,ar5
                           000467  1804 	C$main.c$210$3_0$72 ==.
                                   1805 ;	main.c:210: for(i=0;i<8;i++)
      000467 0E               [12] 1806 	inc	r6
      000468 BE 08 00         [24] 1807 	cjne	r6,#0x08,00118$
      00046B                       1808 00118$:
      00046B 40 EF            [24] 1809 	jc	00104$
      00046D                       1810 00106$:
                           00046D  1811 	C$main.c$215$1_0$70 ==.
                                   1812 ;	main.c:215: }
                           00046D  1813 	C$main.c$215$1_0$70 ==.
                           00046D  1814 	XG$On_Uart_Idle$0$0 ==.
      00046D 22               [24] 1815 	ret
                                   1816 ;------------------------------------------------------------
                                   1817 ;Allocation info for local variables in function 'On_Uart_Buff_Full'
                                   1818 ;------------------------------------------------------------
                                   1819 ;length                    Allocated with name '_On_Uart_Buff_Full_PARM_2'
                                   1820 ;buff                      Allocated to registers 
                                   1821 ;------------------------------------------------------------
                           00046E  1822 	G$On_Uart_Buff_Full$0$0 ==.
                           00046E  1823 	C$main.c$216$1_0$75 ==.
                                   1824 ;	main.c:216: void On_Uart_Buff_Full(uint8_t __idata * buff,size_t length)//串口缓冲满
                                   1825 ;	-----------------------------------------
                                   1826 ;	 function On_Uart_Buff_Full
                                   1827 ;	-----------------------------------------
      00046E                       1828 _On_Uart_Buff_Full:
                           00046E  1829 	C$main.c$219$1_0$75 ==.
                                   1830 ;	main.c:219: UNUSED(length);
                           00046E  1831 	C$main.c$221$1_0$75 ==.
                                   1832 ;	main.c:221: }
                           00046E  1833 	C$main.c$221$1_0$75 ==.
                           00046E  1834 	XG$On_Uart_Buff_Full$0$0 ==.
      00046E 22               [24] 1835 	ret
                                   1836 ;------------------------------------------------------------
                                   1837 ;Allocation info for local variables in function 'main'
                                   1838 ;------------------------------------------------------------
                                   1839 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1840 ;------------------------------------------------------------
                           00046F  1841 	G$main$0$0 ==.
                           00046F  1842 	C$main.c$223$1_0$76 ==.
                                   1843 ;	main.c:223: void main()
                                   1844 ;	-----------------------------------------
                                   1845 ;	 function main
                                   1846 ;	-----------------------------------------
      00046F                       1847 _main:
                           00046F  1848 	C$main.c$225$1_0$76 ==.
                                   1849 ;	main.c:225: systick_init();//初始化主时间
      00046F 12r02r32         [24] 1850 	lcall	_systick_init
                           000472  1851 	C$main.c$226$1_0$76 ==.
                                   1852 ;	main.c:226: Clk_In_Init();//初始化外部中断
      000472 12r03rDE         [24] 1853 	lcall	_Clk_In_Init
                           000475  1854 	C$main.c$227$1_0$76 ==.
                                   1855 ;	main.c:227: Uart_Init();//初始化串口
      000475 12r03r22         [24] 1856 	lcall	_Uart_Init
                           000478  1857 	C$main.c$228$1_0$76 ==.
                                   1858 ;	main.c:228: LS_Init();//初始化点阵屏
      000478 12r00r00         [24] 1859 	lcall	_LS_Init
                           00047B  1860 	C$main.c$230$1_0$76 ==.
                                   1861 ;	main.c:230: while(1)
      00047B                       1862 00102$:
                           00047B  1863 	C$main.c$245$1_0$76 ==.
                                   1864 ;	main.c:245: LS_Show_Char_Font5x7((systick/1000)%10+'0');
      00047B 75*00 E8         [24] 1865 	mov	__divulonglong_PARM_2,#0xe8
      00047E 75*01 03         [24] 1866 	mov	(__divulonglong_PARM_2 + 1),#0x03
      000481 E4               [12] 1867 	clr	a
      000482 F5*02            [12] 1868 	mov	(__divulonglong_PARM_2 + 2),a
      000484 F5*03            [12] 1869 	mov	(__divulonglong_PARM_2 + 3),a
      000486 F5*04            [12] 1870 	mov	(__divulonglong_PARM_2 + 4),a
      000488 F5*05            [12] 1871 	mov	(__divulonglong_PARM_2 + 5),a
      00048A F5*06            [12] 1872 	mov	(__divulonglong_PARM_2 + 6),a
      00048C F5*07            [12] 1873 	mov	(__divulonglong_PARM_2 + 7),a
      00048E 78r09            [12] 1874 	mov	r0,#_systick
      000490 86 82            [24] 1875 	mov	dpl,@r0
      000492 08               [12] 1876 	inc	r0
      000493 86 83            [24] 1877 	mov	dph,@r0
      000495 08               [12] 1878 	inc	r0
      000496 86 F0            [24] 1879 	mov	b,@r0
      000498 08               [12] 1880 	inc	r0
      000499 E6               [12] 1881 	mov	a,@r0
      00049A 08               [12] 1882 	inc	r0
      00049B 86 04            [24] 1883 	mov	ar4,@r0
      00049D 08               [12] 1884 	inc	r0
      00049E 86 05            [24] 1885 	mov	ar5,@r0
      0004A0 08               [12] 1886 	inc	r0
      0004A1 86 06            [24] 1887 	mov	ar6,@r0
      0004A3 08               [12] 1888 	inc	r0
      0004A4 86 07            [24] 1889 	mov	ar7,@r0
      0004A6 12r00r00         [24] 1890 	lcall	__divulonglong
      0004A9 85 82*0E         [24] 1891 	mov	_main_sloc0_1_0,dpl
      0004AC 85 83*0F         [24] 1892 	mov	(_main_sloc0_1_0 + 1),dph
      0004AF 85 F0*10         [24] 1893 	mov	(_main_sloc0_1_0 + 2),b
      0004B2 F5*11            [12] 1894 	mov	(_main_sloc0_1_0 + 3),a
      0004B4 8C*12            [24] 1895 	mov	(_main_sloc0_1_0 + 4),r4
      0004B6 8D*13            [24] 1896 	mov	(_main_sloc0_1_0 + 5),r5
      0004B8 8E*14            [24] 1897 	mov	(_main_sloc0_1_0 + 6),r6
      0004BA 8F*15            [24] 1898 	mov	(_main_sloc0_1_0 + 7),r7
      0004BC 75*00 0A         [24] 1899 	mov	__modulonglong_PARM_2,#0x0a
      0004BF E4               [12] 1900 	clr	a
      0004C0 F5*01            [12] 1901 	mov	(__modulonglong_PARM_2 + 1),a
      0004C2 F5*02            [12] 1902 	mov	(__modulonglong_PARM_2 + 2),a
      0004C4 F5*03            [12] 1903 	mov	(__modulonglong_PARM_2 + 3),a
      0004C6 F5*04            [12] 1904 	mov	(__modulonglong_PARM_2 + 4),a
      0004C8 F5*05            [12] 1905 	mov	(__modulonglong_PARM_2 + 5),a
      0004CA F5*06            [12] 1906 	mov	(__modulonglong_PARM_2 + 6),a
      0004CC F5*07            [12] 1907 	mov	(__modulonglong_PARM_2 + 7),a
      0004CE 85*0E 82         [24] 1908 	mov	dpl,_main_sloc0_1_0
      0004D1 85*0F 83         [24] 1909 	mov	dph,(_main_sloc0_1_0 + 1)
      0004D4 85*10 F0         [24] 1910 	mov	b,(_main_sloc0_1_0 + 2)
      0004D7 E5*11            [12] 1911 	mov	a,(_main_sloc0_1_0 + 3)
      0004D9 AC*12            [24] 1912 	mov	r4,(_main_sloc0_1_0 + 4)
      0004DB AD*13            [24] 1913 	mov	r5,(_main_sloc0_1_0 + 5)
      0004DD AE*14            [24] 1914 	mov	r6,(_main_sloc0_1_0 + 6)
      0004DF AF*15            [24] 1915 	mov	r7,(_main_sloc0_1_0 + 7)
      0004E1 12r00r00         [24] 1916 	lcall	__modulonglong
      0004E4 85 82*0E         [24] 1917 	mov	_main_sloc0_1_0,dpl
      0004E7 85 83*0F         [24] 1918 	mov	(_main_sloc0_1_0 + 1),dph
      0004EA 85 F0*10         [24] 1919 	mov	(_main_sloc0_1_0 + 2),b
      0004ED F5*11            [12] 1920 	mov	(_main_sloc0_1_0 + 3),a
      0004EF 8C*12            [24] 1921 	mov	(_main_sloc0_1_0 + 4),r4
      0004F1 8D*13            [24] 1922 	mov	(_main_sloc0_1_0 + 5),r5
      0004F3 8E*14            [24] 1923 	mov	(_main_sloc0_1_0 + 6),r6
      0004F5 8F*15            [24] 1924 	mov	(_main_sloc0_1_0 + 7),r7
      0004F7 AF*0E            [24] 1925 	mov	r7,_main_sloc0_1_0
      0004F9 74 30            [12] 1926 	mov	a,#0x30
      0004FB 2F               [12] 1927 	add	a,r7
      0004FC F5 82            [12] 1928 	mov	dpl,a
      0004FE 12r00rC6         [24] 1929 	lcall	_LS_Show_Char_Font5x7
      000501 02r04r7B         [24] 1930 	ljmp	00102$
                           000504  1931 	C$main.c$248$1_0$76 ==.
                                   1932 ;	main.c:248: }
                           000504  1933 	C$main.c$248$1_0$76 ==.
                           000504  1934 	XG$main$0$0 ==.
      000504 22               [24] 1935 	ret
                                   1936 	.area CSEG    (CODE)
                                   1937 	.area CONST   (CODE)
                           000000  1938 G$Font5x7$0_0$0 == .
      000000                       1939 _Font5x7:
      000000 00                    1940 	.db #0x00	; 0
      000001 00                    1941 	.db #0x00	; 0
      000002 00                    1942 	.db #0x00	; 0
      000003 00                    1943 	.db #0x00	; 0
      000004 00                    1944 	.db #0x00	; 0
      000005 00                    1945 	.db #0x00	; 0
      000006 00                    1946 	.db #0x00	; 0
      000007 5F                    1947 	.db #0x5f	; 95
      000008 00                    1948 	.db #0x00	; 0
      000009 00                    1949 	.db #0x00	; 0
      00000A 00                    1950 	.db #0x00	; 0
      00000B 07                    1951 	.db #0x07	; 7
      00000C 00                    1952 	.db #0x00	; 0
      00000D 07                    1953 	.db #0x07	; 7
      00000E 00                    1954 	.db #0x00	; 0
      00000F 14                    1955 	.db #0x14	; 20
      000010 7F                    1956 	.db #0x7f	; 127
      000011 14                    1957 	.db #0x14	; 20
      000012 7F                    1958 	.db #0x7f	; 127
      000013 14                    1959 	.db #0x14	; 20
      000014 24                    1960 	.db #0x24	; 36
      000015 2A                    1961 	.db #0x2a	; 42
      000016 07                    1962 	.db #0x07	; 7
      000017 2A                    1963 	.db #0x2a	; 42
      000018 12                    1964 	.db #0x12	; 18
      000019 23                    1965 	.db #0x23	; 35
      00001A 13                    1966 	.db #0x13	; 19
      00001B 08                    1967 	.db #0x08	; 8
      00001C 64                    1968 	.db #0x64	; 100	'd'
      00001D 62                    1969 	.db #0x62	; 98	'b'
      00001E 37                    1970 	.db #0x37	; 55	'7'
      00001F 49                    1971 	.db #0x49	; 73	'I'
      000020 55                    1972 	.db #0x55	; 85	'U'
      000021 22                    1973 	.db #0x22	; 34
      000022 50                    1974 	.db #0x50	; 80	'P'
      000023 00                    1975 	.db #0x00	; 0
      000024 05                    1976 	.db #0x05	; 5
      000025 03                    1977 	.db #0x03	; 3
      000026 00                    1978 	.db #0x00	; 0
      000027 00                    1979 	.db #0x00	; 0
      000028 00                    1980 	.db #0x00	; 0
      000029 1C                    1981 	.db #0x1c	; 28
      00002A 22                    1982 	.db #0x22	; 34
      00002B 41                    1983 	.db #0x41	; 65	'A'
      00002C 00                    1984 	.db #0x00	; 0
      00002D 00                    1985 	.db #0x00	; 0
      00002E 41                    1986 	.db #0x41	; 65	'A'
      00002F 22                    1987 	.db #0x22	; 34
      000030 1C                    1988 	.db #0x1c	; 28
      000031 00                    1989 	.db #0x00	; 0
      000032 08                    1990 	.db #0x08	; 8
      000033 2A                    1991 	.db #0x2a	; 42
      000034 1C                    1992 	.db #0x1c	; 28
      000035 2A                    1993 	.db #0x2a	; 42
      000036 08                    1994 	.db #0x08	; 8
      000037 08                    1995 	.db #0x08	; 8
      000038 08                    1996 	.db #0x08	; 8
      000039 3E                    1997 	.db #0x3e	; 62
      00003A 08                    1998 	.db #0x08	; 8
      00003B 08                    1999 	.db #0x08	; 8
      00003C 00                    2000 	.db #0x00	; 0
      00003D 50                    2001 	.db #0x50	; 80	'P'
      00003E 30                    2002 	.db #0x30	; 48	'0'
      00003F 00                    2003 	.db #0x00	; 0
      000040 00                    2004 	.db #0x00	; 0
      000041 08                    2005 	.db #0x08	; 8
      000042 08                    2006 	.db #0x08	; 8
      000043 08                    2007 	.db #0x08	; 8
      000044 08                    2008 	.db #0x08	; 8
      000045 08                    2009 	.db #0x08	; 8
      000046 00                    2010 	.db #0x00	; 0
      000047 60                    2011 	.db #0x60	; 96
      000048 60                    2012 	.db #0x60	; 96
      000049 00                    2013 	.db #0x00	; 0
      00004A 00                    2014 	.db #0x00	; 0
      00004B 20                    2015 	.db #0x20	; 32
      00004C 10                    2016 	.db #0x10	; 16
      00004D 08                    2017 	.db #0x08	; 8
      00004E 04                    2018 	.db #0x04	; 4
      00004F 02                    2019 	.db #0x02	; 2
      000050 3E                    2020 	.db #0x3e	; 62
      000051 51                    2021 	.db #0x51	; 81	'Q'
      000052 49                    2022 	.db #0x49	; 73	'I'
      000053 45                    2023 	.db #0x45	; 69	'E'
      000054 3E                    2024 	.db #0x3e	; 62
      000055 00                    2025 	.db #0x00	; 0
      000056 42                    2026 	.db #0x42	; 66	'B'
      000057 7F                    2027 	.db #0x7f	; 127
      000058 40                    2028 	.db #0x40	; 64
      000059 00                    2029 	.db #0x00	; 0
      00005A 42                    2030 	.db #0x42	; 66	'B'
      00005B 61                    2031 	.db #0x61	; 97	'a'
      00005C 51                    2032 	.db #0x51	; 81	'Q'
      00005D 49                    2033 	.db #0x49	; 73	'I'
      00005E 46                    2034 	.db #0x46	; 70	'F'
      00005F 21                    2035 	.db #0x21	; 33
      000060 41                    2036 	.db #0x41	; 65	'A'
      000061 45                    2037 	.db #0x45	; 69	'E'
      000062 4B                    2038 	.db #0x4b	; 75	'K'
      000063 31                    2039 	.db #0x31	; 49	'1'
      000064 18                    2040 	.db #0x18	; 24
      000065 14                    2041 	.db #0x14	; 20
      000066 12                    2042 	.db #0x12	; 18
      000067 7F                    2043 	.db #0x7f	; 127
      000068 10                    2044 	.db #0x10	; 16
      000069 27                    2045 	.db #0x27	; 39
      00006A 45                    2046 	.db #0x45	; 69	'E'
      00006B 45                    2047 	.db #0x45	; 69	'E'
      00006C 45                    2048 	.db #0x45	; 69	'E'
      00006D 39                    2049 	.db #0x39	; 57	'9'
      00006E 3C                    2050 	.db #0x3c	; 60
      00006F 4A                    2051 	.db #0x4a	; 74	'J'
      000070 49                    2052 	.db #0x49	; 73	'I'
      000071 49                    2053 	.db #0x49	; 73	'I'
      000072 30                    2054 	.db #0x30	; 48	'0'
      000073 01                    2055 	.db #0x01	; 1
      000074 71                    2056 	.db #0x71	; 113	'q'
      000075 09                    2057 	.db #0x09	; 9
      000076 05                    2058 	.db #0x05	; 5
      000077 03                    2059 	.db #0x03	; 3
      000078 36                    2060 	.db #0x36	; 54	'6'
      000079 49                    2061 	.db #0x49	; 73	'I'
      00007A 49                    2062 	.db #0x49	; 73	'I'
      00007B 49                    2063 	.db #0x49	; 73	'I'
      00007C 36                    2064 	.db #0x36	; 54	'6'
      00007D 06                    2065 	.db #0x06	; 6
      00007E 49                    2066 	.db #0x49	; 73	'I'
      00007F 49                    2067 	.db #0x49	; 73	'I'
      000080 29                    2068 	.db #0x29	; 41
      000081 1E                    2069 	.db #0x1e	; 30
      000082 00                    2070 	.db #0x00	; 0
      000083 36                    2071 	.db #0x36	; 54	'6'
      000084 36                    2072 	.db #0x36	; 54	'6'
      000085 00                    2073 	.db #0x00	; 0
      000086 00                    2074 	.db #0x00	; 0
      000087 00                    2075 	.db #0x00	; 0
      000088 56                    2076 	.db #0x56	; 86	'V'
      000089 36                    2077 	.db #0x36	; 54	'6'
      00008A 00                    2078 	.db #0x00	; 0
      00008B 00                    2079 	.db #0x00	; 0
      00008C 00                    2080 	.db #0x00	; 0
      00008D 08                    2081 	.db #0x08	; 8
      00008E 14                    2082 	.db #0x14	; 20
      00008F 22                    2083 	.db #0x22	; 34
      000090 41                    2084 	.db #0x41	; 65	'A'
      000091 14                    2085 	.db #0x14	; 20
      000092 14                    2086 	.db #0x14	; 20
      000093 14                    2087 	.db #0x14	; 20
      000094 14                    2088 	.db #0x14	; 20
      000095 14                    2089 	.db #0x14	; 20
      000096 41                    2090 	.db #0x41	; 65	'A'
      000097 22                    2091 	.db #0x22	; 34
      000098 14                    2092 	.db #0x14	; 20
      000099 08                    2093 	.db #0x08	; 8
      00009A 00                    2094 	.db #0x00	; 0
      00009B 02                    2095 	.db #0x02	; 2
      00009C 01                    2096 	.db #0x01	; 1
      00009D 51                    2097 	.db #0x51	; 81	'Q'
      00009E 09                    2098 	.db #0x09	; 9
      00009F 06                    2099 	.db #0x06	; 6
      0000A0 32                    2100 	.db #0x32	; 50	'2'
      0000A1 49                    2101 	.db #0x49	; 73	'I'
      0000A2 79                    2102 	.db #0x79	; 121	'y'
      0000A3 41                    2103 	.db #0x41	; 65	'A'
      0000A4 3E                    2104 	.db #0x3e	; 62
      0000A5 7E                    2105 	.db #0x7e	; 126
      0000A6 11                    2106 	.db #0x11	; 17
      0000A7 11                    2107 	.db #0x11	; 17
      0000A8 11                    2108 	.db #0x11	; 17
      0000A9 7E                    2109 	.db #0x7e	; 126
      0000AA 7F                    2110 	.db #0x7f	; 127
      0000AB 49                    2111 	.db #0x49	; 73	'I'
      0000AC 49                    2112 	.db #0x49	; 73	'I'
      0000AD 49                    2113 	.db #0x49	; 73	'I'
      0000AE 36                    2114 	.db #0x36	; 54	'6'
      0000AF 3E                    2115 	.db #0x3e	; 62
      0000B0 41                    2116 	.db #0x41	; 65	'A'
      0000B1 41                    2117 	.db #0x41	; 65	'A'
      0000B2 41                    2118 	.db #0x41	; 65	'A'
      0000B3 22                    2119 	.db #0x22	; 34
      0000B4 7F                    2120 	.db #0x7f	; 127
      0000B5 41                    2121 	.db #0x41	; 65	'A'
      0000B6 41                    2122 	.db #0x41	; 65	'A'
      0000B7 22                    2123 	.db #0x22	; 34
      0000B8 1C                    2124 	.db #0x1c	; 28
      0000B9 7F                    2125 	.db #0x7f	; 127
      0000BA 49                    2126 	.db #0x49	; 73	'I'
      0000BB 49                    2127 	.db #0x49	; 73	'I'
      0000BC 49                    2128 	.db #0x49	; 73	'I'
      0000BD 41                    2129 	.db #0x41	; 65	'A'
      0000BE 7F                    2130 	.db #0x7f	; 127
      0000BF 09                    2131 	.db #0x09	; 9
      0000C0 09                    2132 	.db #0x09	; 9
      0000C1 01                    2133 	.db #0x01	; 1
      0000C2 01                    2134 	.db #0x01	; 1
      0000C3 3E                    2135 	.db #0x3e	; 62
      0000C4 41                    2136 	.db #0x41	; 65	'A'
      0000C5 41                    2137 	.db #0x41	; 65	'A'
      0000C6 51                    2138 	.db #0x51	; 81	'Q'
      0000C7 32                    2139 	.db #0x32	; 50	'2'
      0000C8 7F                    2140 	.db #0x7f	; 127
      0000C9 08                    2141 	.db #0x08	; 8
      0000CA 08                    2142 	.db #0x08	; 8
      0000CB 08                    2143 	.db #0x08	; 8
      0000CC 7F                    2144 	.db #0x7f	; 127
      0000CD 00                    2145 	.db #0x00	; 0
      0000CE 41                    2146 	.db #0x41	; 65	'A'
      0000CF 7F                    2147 	.db #0x7f	; 127
      0000D0 41                    2148 	.db #0x41	; 65	'A'
      0000D1 00                    2149 	.db #0x00	; 0
      0000D2 20                    2150 	.db #0x20	; 32
      0000D3 40                    2151 	.db #0x40	; 64
      0000D4 41                    2152 	.db #0x41	; 65	'A'
      0000D5 3F                    2153 	.db #0x3f	; 63
      0000D6 01                    2154 	.db #0x01	; 1
      0000D7 7F                    2155 	.db #0x7f	; 127
      0000D8 08                    2156 	.db #0x08	; 8
      0000D9 14                    2157 	.db #0x14	; 20
      0000DA 22                    2158 	.db #0x22	; 34
      0000DB 41                    2159 	.db #0x41	; 65	'A'
      0000DC 7F                    2160 	.db #0x7f	; 127
      0000DD 40                    2161 	.db #0x40	; 64
      0000DE 40                    2162 	.db #0x40	; 64
      0000DF 40                    2163 	.db #0x40	; 64
      0000E0 40                    2164 	.db #0x40	; 64
      0000E1 7F                    2165 	.db #0x7f	; 127
      0000E2 02                    2166 	.db #0x02	; 2
      0000E3 04                    2167 	.db #0x04	; 4
      0000E4 02                    2168 	.db #0x02	; 2
      0000E5 7F                    2169 	.db #0x7f	; 127
      0000E6 7F                    2170 	.db #0x7f	; 127
      0000E7 04                    2171 	.db #0x04	; 4
      0000E8 08                    2172 	.db #0x08	; 8
      0000E9 10                    2173 	.db #0x10	; 16
      0000EA 7F                    2174 	.db #0x7f	; 127
      0000EB 3E                    2175 	.db #0x3e	; 62
      0000EC 41                    2176 	.db #0x41	; 65	'A'
      0000ED 41                    2177 	.db #0x41	; 65	'A'
      0000EE 41                    2178 	.db #0x41	; 65	'A'
      0000EF 3E                    2179 	.db #0x3e	; 62
      0000F0 7F                    2180 	.db #0x7f	; 127
      0000F1 09                    2181 	.db #0x09	; 9
      0000F2 09                    2182 	.db #0x09	; 9
      0000F3 09                    2183 	.db #0x09	; 9
      0000F4 06                    2184 	.db #0x06	; 6
      0000F5 3E                    2185 	.db #0x3e	; 62
      0000F6 41                    2186 	.db #0x41	; 65	'A'
      0000F7 51                    2187 	.db #0x51	; 81	'Q'
      0000F8 21                    2188 	.db #0x21	; 33
      0000F9 5E                    2189 	.db #0x5e	; 94
      0000FA 7F                    2190 	.db #0x7f	; 127
      0000FB 09                    2191 	.db #0x09	; 9
      0000FC 19                    2192 	.db #0x19	; 25
      0000FD 29                    2193 	.db #0x29	; 41
      0000FE 46                    2194 	.db #0x46	; 70	'F'
      0000FF 46                    2195 	.db #0x46	; 70	'F'
      000100 49                    2196 	.db #0x49	; 73	'I'
      000101 49                    2197 	.db #0x49	; 73	'I'
      000102 49                    2198 	.db #0x49	; 73	'I'
      000103 31                    2199 	.db #0x31	; 49	'1'
      000104 01                    2200 	.db #0x01	; 1
      000105 01                    2201 	.db #0x01	; 1
      000106 7F                    2202 	.db #0x7f	; 127
      000107 01                    2203 	.db #0x01	; 1
      000108 01                    2204 	.db #0x01	; 1
      000109 3F                    2205 	.db #0x3f	; 63
      00010A 40                    2206 	.db #0x40	; 64
      00010B 40                    2207 	.db #0x40	; 64
      00010C 40                    2208 	.db #0x40	; 64
      00010D 3F                    2209 	.db #0x3f	; 63
      00010E 1F                    2210 	.db #0x1f	; 31
      00010F 20                    2211 	.db #0x20	; 32
      000110 40                    2212 	.db #0x40	; 64
      000111 20                    2213 	.db #0x20	; 32
      000112 1F                    2214 	.db #0x1f	; 31
      000113 7F                    2215 	.db #0x7f	; 127
      000114 20                    2216 	.db #0x20	; 32
      000115 18                    2217 	.db #0x18	; 24
      000116 20                    2218 	.db #0x20	; 32
      000117 7F                    2219 	.db #0x7f	; 127
      000118 63                    2220 	.db #0x63	; 99	'c'
      000119 14                    2221 	.db #0x14	; 20
      00011A 08                    2222 	.db #0x08	; 8
      00011B 14                    2223 	.db #0x14	; 20
      00011C 63                    2224 	.db #0x63	; 99	'c'
      00011D 03                    2225 	.db #0x03	; 3
      00011E 04                    2226 	.db #0x04	; 4
      00011F 78                    2227 	.db #0x78	; 120	'x'
      000120 04                    2228 	.db #0x04	; 4
      000121 03                    2229 	.db #0x03	; 3
      000122 61                    2230 	.db #0x61	; 97	'a'
      000123 51                    2231 	.db #0x51	; 81	'Q'
      000124 49                    2232 	.db #0x49	; 73	'I'
      000125 45                    2233 	.db #0x45	; 69	'E'
      000126 43                    2234 	.db #0x43	; 67	'C'
      000127 00                    2235 	.db #0x00	; 0
      000128 00                    2236 	.db #0x00	; 0
      000129 7F                    2237 	.db #0x7f	; 127
      00012A 41                    2238 	.db #0x41	; 65	'A'
      00012B 41                    2239 	.db #0x41	; 65	'A'
      00012C 02                    2240 	.db #0x02	; 2
      00012D 04                    2241 	.db #0x04	; 4
      00012E 08                    2242 	.db #0x08	; 8
      00012F 10                    2243 	.db #0x10	; 16
      000130 20                    2244 	.db #0x20	; 32
      000131 41                    2245 	.db #0x41	; 65	'A'
      000132 41                    2246 	.db #0x41	; 65	'A'
      000133 7F                    2247 	.db #0x7f	; 127
      000134 00                    2248 	.db #0x00	; 0
      000135 00                    2249 	.db #0x00	; 0
      000136 04                    2250 	.db #0x04	; 4
      000137 02                    2251 	.db #0x02	; 2
      000138 01                    2252 	.db #0x01	; 1
      000139 02                    2253 	.db #0x02	; 2
      00013A 04                    2254 	.db #0x04	; 4
      00013B 40                    2255 	.db #0x40	; 64
      00013C 40                    2256 	.db #0x40	; 64
      00013D 40                    2257 	.db #0x40	; 64
      00013E 40                    2258 	.db #0x40	; 64
      00013F 40                    2259 	.db #0x40	; 64
      000140 00                    2260 	.db #0x00	; 0
      000141 01                    2261 	.db #0x01	; 1
      000142 02                    2262 	.db #0x02	; 2
      000143 04                    2263 	.db #0x04	; 4
      000144 00                    2264 	.db #0x00	; 0
      000145 20                    2265 	.db #0x20	; 32
      000146 54                    2266 	.db #0x54	; 84	'T'
      000147 54                    2267 	.db #0x54	; 84	'T'
      000148 54                    2268 	.db #0x54	; 84	'T'
      000149 78                    2269 	.db #0x78	; 120	'x'
      00014A 7F                    2270 	.db #0x7f	; 127
      00014B 48                    2271 	.db #0x48	; 72	'H'
      00014C 44                    2272 	.db #0x44	; 68	'D'
      00014D 44                    2273 	.db #0x44	; 68	'D'
      00014E 38                    2274 	.db #0x38	; 56	'8'
      00014F 38                    2275 	.db #0x38	; 56	'8'
      000150 44                    2276 	.db #0x44	; 68	'D'
      000151 44                    2277 	.db #0x44	; 68	'D'
      000152 44                    2278 	.db #0x44	; 68	'D'
      000153 20                    2279 	.db #0x20	; 32
      000154 38                    2280 	.db #0x38	; 56	'8'
      000155 44                    2281 	.db #0x44	; 68	'D'
      000156 44                    2282 	.db #0x44	; 68	'D'
      000157 48                    2283 	.db #0x48	; 72	'H'
      000158 7F                    2284 	.db #0x7f	; 127
      000159 38                    2285 	.db #0x38	; 56	'8'
      00015A 54                    2286 	.db #0x54	; 84	'T'
      00015B 54                    2287 	.db #0x54	; 84	'T'
      00015C 54                    2288 	.db #0x54	; 84	'T'
      00015D 18                    2289 	.db #0x18	; 24
      00015E 08                    2290 	.db #0x08	; 8
      00015F 7E                    2291 	.db #0x7e	; 126
      000160 09                    2292 	.db #0x09	; 9
      000161 01                    2293 	.db #0x01	; 1
      000162 02                    2294 	.db #0x02	; 2
      000163 08                    2295 	.db #0x08	; 8
      000164 14                    2296 	.db #0x14	; 20
      000165 54                    2297 	.db #0x54	; 84	'T'
      000166 54                    2298 	.db #0x54	; 84	'T'
      000167 3C                    2299 	.db #0x3c	; 60
      000168 7F                    2300 	.db #0x7f	; 127
      000169 08                    2301 	.db #0x08	; 8
      00016A 04                    2302 	.db #0x04	; 4
      00016B 04                    2303 	.db #0x04	; 4
      00016C 78                    2304 	.db #0x78	; 120	'x'
      00016D 00                    2305 	.db #0x00	; 0
      00016E 44                    2306 	.db #0x44	; 68	'D'
      00016F 7D                    2307 	.db #0x7d	; 125
      000170 40                    2308 	.db #0x40	; 64
      000171 00                    2309 	.db #0x00	; 0
      000172 20                    2310 	.db #0x20	; 32
      000173 40                    2311 	.db #0x40	; 64
      000174 44                    2312 	.db #0x44	; 68	'D'
      000175 3D                    2313 	.db #0x3d	; 61
      000176 00                    2314 	.db #0x00	; 0
      000177 00                    2315 	.db #0x00	; 0
      000178 7F                    2316 	.db #0x7f	; 127
      000179 10                    2317 	.db #0x10	; 16
      00017A 28                    2318 	.db #0x28	; 40
      00017B 44                    2319 	.db #0x44	; 68	'D'
      00017C 00                    2320 	.db #0x00	; 0
      00017D 41                    2321 	.db #0x41	; 65	'A'
      00017E 7F                    2322 	.db #0x7f	; 127
      00017F 40                    2323 	.db #0x40	; 64
      000180 00                    2324 	.db #0x00	; 0
      000181 7C                    2325 	.db #0x7c	; 124
      000182 04                    2326 	.db #0x04	; 4
      000183 18                    2327 	.db #0x18	; 24
      000184 04                    2328 	.db #0x04	; 4
      000185 78                    2329 	.db #0x78	; 120	'x'
      000186 7C                    2330 	.db #0x7c	; 124
      000187 08                    2331 	.db #0x08	; 8
      000188 04                    2332 	.db #0x04	; 4
      000189 04                    2333 	.db #0x04	; 4
      00018A 78                    2334 	.db #0x78	; 120	'x'
      00018B 38                    2335 	.db #0x38	; 56	'8'
      00018C 44                    2336 	.db #0x44	; 68	'D'
      00018D 44                    2337 	.db #0x44	; 68	'D'
      00018E 44                    2338 	.db #0x44	; 68	'D'
      00018F 38                    2339 	.db #0x38	; 56	'8'
      000190 7C                    2340 	.db #0x7c	; 124
      000191 14                    2341 	.db #0x14	; 20
      000192 14                    2342 	.db #0x14	; 20
      000193 14                    2343 	.db #0x14	; 20
      000194 08                    2344 	.db #0x08	; 8
      000195 08                    2345 	.db #0x08	; 8
      000196 14                    2346 	.db #0x14	; 20
      000197 14                    2347 	.db #0x14	; 20
      000198 18                    2348 	.db #0x18	; 24
      000199 7C                    2349 	.db #0x7c	; 124
      00019A 7C                    2350 	.db #0x7c	; 124
      00019B 08                    2351 	.db #0x08	; 8
      00019C 04                    2352 	.db #0x04	; 4
      00019D 04                    2353 	.db #0x04	; 4
      00019E 08                    2354 	.db #0x08	; 8
      00019F 48                    2355 	.db #0x48	; 72	'H'
      0001A0 54                    2356 	.db #0x54	; 84	'T'
      0001A1 54                    2357 	.db #0x54	; 84	'T'
      0001A2 54                    2358 	.db #0x54	; 84	'T'
      0001A3 20                    2359 	.db #0x20	; 32
      0001A4 04                    2360 	.db #0x04	; 4
      0001A5 3F                    2361 	.db #0x3f	; 63
      0001A6 44                    2362 	.db #0x44	; 68	'D'
      0001A7 40                    2363 	.db #0x40	; 64
      0001A8 20                    2364 	.db #0x20	; 32
      0001A9 3C                    2365 	.db #0x3c	; 60
      0001AA 40                    2366 	.db #0x40	; 64
      0001AB 40                    2367 	.db #0x40	; 64
      0001AC 20                    2368 	.db #0x20	; 32
      0001AD 7C                    2369 	.db #0x7c	; 124
      0001AE 1C                    2370 	.db #0x1c	; 28
      0001AF 20                    2371 	.db #0x20	; 32
      0001B0 40                    2372 	.db #0x40	; 64
      0001B1 20                    2373 	.db #0x20	; 32
      0001B2 1C                    2374 	.db #0x1c	; 28
      0001B3 3C                    2375 	.db #0x3c	; 60
      0001B4 40                    2376 	.db #0x40	; 64
      0001B5 30                    2377 	.db #0x30	; 48	'0'
      0001B6 40                    2378 	.db #0x40	; 64
      0001B7 3C                    2379 	.db #0x3c	; 60
      0001B8 44                    2380 	.db #0x44	; 68	'D'
      0001B9 28                    2381 	.db #0x28	; 40
      0001BA 10                    2382 	.db #0x10	; 16
      0001BB 28                    2383 	.db #0x28	; 40
      0001BC 44                    2384 	.db #0x44	; 68	'D'
      0001BD 0C                    2385 	.db #0x0c	; 12
      0001BE 50                    2386 	.db #0x50	; 80	'P'
      0001BF 50                    2387 	.db #0x50	; 80	'P'
      0001C0 50                    2388 	.db #0x50	; 80	'P'
      0001C1 3C                    2389 	.db #0x3c	; 60
      0001C2 44                    2390 	.db #0x44	; 68	'D'
      0001C3 64                    2391 	.db #0x64	; 100	'd'
      0001C4 54                    2392 	.db #0x54	; 84	'T'
      0001C5 4C                    2393 	.db #0x4c	; 76	'L'
      0001C6 44                    2394 	.db #0x44	; 68	'D'
      0001C7 00                    2395 	.db #0x00	; 0
      0001C8 08                    2396 	.db #0x08	; 8
      0001C9 36                    2397 	.db #0x36	; 54	'6'
      0001CA 41                    2398 	.db #0x41	; 65	'A'
      0001CB 00                    2399 	.db #0x00	; 0
      0001CC 00                    2400 	.db #0x00	; 0
      0001CD 00                    2401 	.db #0x00	; 0
      0001CE 7F                    2402 	.db #0x7f	; 127
      0001CF 00                    2403 	.db #0x00	; 0
      0001D0 00                    2404 	.db #0x00	; 0
      0001D1 00                    2405 	.db #0x00	; 0
      0001D2 41                    2406 	.db #0x41	; 65	'A'
      0001D3 36                    2407 	.db #0x36	; 54	'6'
      0001D4 08                    2408 	.db #0x08	; 8
      0001D5 00                    2409 	.db #0x00	; 0
      0001D6 02                    2410 	.db #0x02	; 2
      0001D7 01                    2411 	.db #0x01	; 1
      0001D8 02                    2412 	.db #0x02	; 2
      0001D9 04                    2413 	.db #0x04	; 4
      0001DA 02                    2414 	.db #0x02	; 2
      0001DB FF                    2415 	.db #0xff	; 255
      0001DC FF                    2416 	.db #0xff	; 255
      0001DD FF                    2417 	.db #0xff	; 255
      0001DE FF                    2418 	.db #0xff	; 255
      0001DF FF                    2419 	.db #0xff	; 255
                                   2420 	.area XINIT   (CODE)
                                   2421 	.area CABS    (ABS,CODE)
