                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Uart_Interrupt
                                     13 	.globl _Uart_Send
                                     14 	.globl _Uart_Init
                                     15 	.globl _systick_interrupt
                                     16 	.globl _systick_init
                                     17 	.globl _LS_DisplayOneRow
                                     18 	.globl _LS_595_DataOut
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _B
                                     95 	.globl _ACC
                                     96 	.globl _PSW
                                     97 	.globl _IP
                                     98 	.globl _P3
                                     99 	.globl _IE
                                    100 	.globl _P2
                                    101 	.globl _SBUF
                                    102 	.globl _SCON
                                    103 	.globl _P1
                                    104 	.globl _TH1
                                    105 	.globl _TH0
                                    106 	.globl _TL1
                                    107 	.globl _TL0
                                    108 	.globl _TMOD
                                    109 	.globl _TCON
                                    110 	.globl _PCON
                                    111 	.globl _DPH
                                    112 	.globl _DPL
                                    113 	.globl _SP
                                    114 	.globl _P0
                                    115 	.globl _Tx_Busy
                                    116 	.globl _Last_Receive_Tick
                                    117 	.globl _Uart_Receive_Buff_Index
                                    118 	.globl _Uart_Receive_Buff
                                    119 	.globl _systick
                                    120 	.globl _On_Uart_Buff_Full_PARM_2
                                    121 	.globl _On_Uart_Idle_PARM_2
                                    122 	.globl _LS_DisplayOneRow_PARM_2
                                    123 	.globl _LS_595_DataOut_PARM_2
                                    124 	.globl _LS_RAM
                                    125 	.globl _LS_Init
                                    126 	.globl _LS_Deinit
                                    127 	.globl _LS_Refresh
                                    128 	.globl _On_SysTick_Timer
                                    129 	.globl _On_Uart_Idle
                                    130 	.globl _On_Uart_Buff_Full
                                    131 ;--------------------------------------------------------
                                    132 ; special function registers
                                    133 ;--------------------------------------------------------
                                    134 	.area RSEG    (ABS,DATA)
      000000                        135 	.org 0x0000
                           000080   136 G$P0$0_0$0 == 0x0080
                           000080   137 _P0	=	0x0080
                           000081   138 G$SP$0_0$0 == 0x0081
                           000081   139 _SP	=	0x0081
                           000082   140 G$DPL$0_0$0 == 0x0082
                           000082   141 _DPL	=	0x0082
                           000083   142 G$DPH$0_0$0 == 0x0083
                           000083   143 _DPH	=	0x0083
                           000087   144 G$PCON$0_0$0 == 0x0087
                           000087   145 _PCON	=	0x0087
                           000088   146 G$TCON$0_0$0 == 0x0088
                           000088   147 _TCON	=	0x0088
                           000089   148 G$TMOD$0_0$0 == 0x0089
                           000089   149 _TMOD	=	0x0089
                           00008A   150 G$TL0$0_0$0 == 0x008a
                           00008A   151 _TL0	=	0x008a
                           00008B   152 G$TL1$0_0$0 == 0x008b
                           00008B   153 _TL1	=	0x008b
                           00008C   154 G$TH0$0_0$0 == 0x008c
                           00008C   155 _TH0	=	0x008c
                           00008D   156 G$TH1$0_0$0 == 0x008d
                           00008D   157 _TH1	=	0x008d
                           000090   158 G$P1$0_0$0 == 0x0090
                           000090   159 _P1	=	0x0090
                           000098   160 G$SCON$0_0$0 == 0x0098
                           000098   161 _SCON	=	0x0098
                           000099   162 G$SBUF$0_0$0 == 0x0099
                           000099   163 _SBUF	=	0x0099
                           0000A0   164 G$P2$0_0$0 == 0x00a0
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 G$IE$0_0$0 == 0x00a8
                           0000A8   167 _IE	=	0x00a8
                           0000B0   168 G$P3$0_0$0 == 0x00b0
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 G$IP$0_0$0 == 0x00b8
                           0000B8   171 _IP	=	0x00b8
                           0000D0   172 G$PSW$0_0$0 == 0x00d0
                           0000D0   173 _PSW	=	0x00d0
                           0000E0   174 G$ACC$0_0$0 == 0x00e0
                           0000E0   175 _ACC	=	0x00e0
                           0000F0   176 G$B$0_0$0 == 0x00f0
                           0000F0   177 _B	=	0x00f0
                           000091   178 Lmain.LS_Init$P1M1$1_0$28 == 0x0091
                           000091   179 _LS_Init_P1M1_65536_28	=	0x0091
                           000092   180 Lmain.LS_Init$P1M0$1_0$28 == 0x0092
                           000092   181 _LS_Init_P1M0_65536_28	=	0x0092
                           000091   182 Lmain.LS_Deinit$P1M1$1_0$29 == 0x0091
                           000091   183 _LS_Deinit_P1M1_65536_29	=	0x0091
                           000092   184 Lmain.LS_Deinit$P1M0$1_0$29 == 0x0092
                           000092   185 _LS_Deinit_P1M0_65536_29	=	0x0092
                           00008E   186 Lmain.systick_init$AUXR$1_0$42 == 0x008e
                           00008E   187 _systick_init_AUXR_65536_42	=	0x008e
                           00008E   188 Lmain.Uart_Init$AUXR$1_0$47 == 0x008e
                           00008E   189 _Uart_Init_AUXR_65536_47	=	0x008e
                           0000D6   190 Lmain.Uart_Init$T2H$1_0$47 == 0x00d6
                           0000D6   191 _Uart_Init_T2H_65536_47	=	0x00d6
                           0000D7   192 Lmain.Uart_Init$T2L$1_0$47 == 0x00d7
                           0000D7   193 _Uart_Init_T2L_65536_47	=	0x00d7
                           0000A2   194 Lmain.Uart_Init$P_SW1$1_0$47 == 0x00a2
                           0000A2   195 _Uart_Init_P_SW1_65536_47	=	0x00a2
                                    196 ;--------------------------------------------------------
                                    197 ; special function bits
                                    198 ;--------------------------------------------------------
                                    199 	.area RSEG    (ABS,DATA)
      000000                        200 	.org 0x0000
                           000080   201 G$P0_0$0_0$0 == 0x0080
                           000080   202 _P0_0	=	0x0080
                           000081   203 G$P0_1$0_0$0 == 0x0081
                           000081   204 _P0_1	=	0x0081
                           000082   205 G$P0_2$0_0$0 == 0x0082
                           000082   206 _P0_2	=	0x0082
                           000083   207 G$P0_3$0_0$0 == 0x0083
                           000083   208 _P0_3	=	0x0083
                           000084   209 G$P0_4$0_0$0 == 0x0084
                           000084   210 _P0_4	=	0x0084
                           000085   211 G$P0_5$0_0$0 == 0x0085
                           000085   212 _P0_5	=	0x0085
                           000086   213 G$P0_6$0_0$0 == 0x0086
                           000086   214 _P0_6	=	0x0086
                           000087   215 G$P0_7$0_0$0 == 0x0087
                           000087   216 _P0_7	=	0x0087
                           000088   217 G$IT0$0_0$0 == 0x0088
                           000088   218 _IT0	=	0x0088
                           000089   219 G$IE0$0_0$0 == 0x0089
                           000089   220 _IE0	=	0x0089
                           00008A   221 G$IT1$0_0$0 == 0x008a
                           00008A   222 _IT1	=	0x008a
                           00008B   223 G$IE1$0_0$0 == 0x008b
                           00008B   224 _IE1	=	0x008b
                           00008C   225 G$TR0$0_0$0 == 0x008c
                           00008C   226 _TR0	=	0x008c
                           00008D   227 G$TF0$0_0$0 == 0x008d
                           00008D   228 _TF0	=	0x008d
                           00008E   229 G$TR1$0_0$0 == 0x008e
                           00008E   230 _TR1	=	0x008e
                           00008F   231 G$TF1$0_0$0 == 0x008f
                           00008F   232 _TF1	=	0x008f
                           000090   233 G$P1_0$0_0$0 == 0x0090
                           000090   234 _P1_0	=	0x0090
                           000091   235 G$P1_1$0_0$0 == 0x0091
                           000091   236 _P1_1	=	0x0091
                           000092   237 G$P1_2$0_0$0 == 0x0092
                           000092   238 _P1_2	=	0x0092
                           000093   239 G$P1_3$0_0$0 == 0x0093
                           000093   240 _P1_3	=	0x0093
                           000094   241 G$P1_4$0_0$0 == 0x0094
                           000094   242 _P1_4	=	0x0094
                           000095   243 G$P1_5$0_0$0 == 0x0095
                           000095   244 _P1_5	=	0x0095
                           000096   245 G$P1_6$0_0$0 == 0x0096
                           000096   246 _P1_6	=	0x0096
                           000097   247 G$P1_7$0_0$0 == 0x0097
                           000097   248 _P1_7	=	0x0097
                           000098   249 G$RI$0_0$0 == 0x0098
                           000098   250 _RI	=	0x0098
                           000099   251 G$TI$0_0$0 == 0x0099
                           000099   252 _TI	=	0x0099
                           00009A   253 G$RB8$0_0$0 == 0x009a
                           00009A   254 _RB8	=	0x009a
                           00009B   255 G$TB8$0_0$0 == 0x009b
                           00009B   256 _TB8	=	0x009b
                           00009C   257 G$REN$0_0$0 == 0x009c
                           00009C   258 _REN	=	0x009c
                           00009D   259 G$SM2$0_0$0 == 0x009d
                           00009D   260 _SM2	=	0x009d
                           00009E   261 G$SM1$0_0$0 == 0x009e
                           00009E   262 _SM1	=	0x009e
                           00009F   263 G$SM0$0_0$0 == 0x009f
                           00009F   264 _SM0	=	0x009f
                           0000A0   265 G$P2_0$0_0$0 == 0x00a0
                           0000A0   266 _P2_0	=	0x00a0
                           0000A1   267 G$P2_1$0_0$0 == 0x00a1
                           0000A1   268 _P2_1	=	0x00a1
                           0000A2   269 G$P2_2$0_0$0 == 0x00a2
                           0000A2   270 _P2_2	=	0x00a2
                           0000A3   271 G$P2_3$0_0$0 == 0x00a3
                           0000A3   272 _P2_3	=	0x00a3
                           0000A4   273 G$P2_4$0_0$0 == 0x00a4
                           0000A4   274 _P2_4	=	0x00a4
                           0000A5   275 G$P2_5$0_0$0 == 0x00a5
                           0000A5   276 _P2_5	=	0x00a5
                           0000A6   277 G$P2_6$0_0$0 == 0x00a6
                           0000A6   278 _P2_6	=	0x00a6
                           0000A7   279 G$P2_7$0_0$0 == 0x00a7
                           0000A7   280 _P2_7	=	0x00a7
                           0000A8   281 G$EX0$0_0$0 == 0x00a8
                           0000A8   282 _EX0	=	0x00a8
                           0000A9   283 G$ET0$0_0$0 == 0x00a9
                           0000A9   284 _ET0	=	0x00a9
                           0000AA   285 G$EX1$0_0$0 == 0x00aa
                           0000AA   286 _EX1	=	0x00aa
                           0000AB   287 G$ET1$0_0$0 == 0x00ab
                           0000AB   288 _ET1	=	0x00ab
                           0000AC   289 G$ES$0_0$0 == 0x00ac
                           0000AC   290 _ES	=	0x00ac
                           0000AF   291 G$EA$0_0$0 == 0x00af
                           0000AF   292 _EA	=	0x00af
                           0000B0   293 G$P3_0$0_0$0 == 0x00b0
                           0000B0   294 _P3_0	=	0x00b0
                           0000B1   295 G$P3_1$0_0$0 == 0x00b1
                           0000B1   296 _P3_1	=	0x00b1
                           0000B2   297 G$P3_2$0_0$0 == 0x00b2
                           0000B2   298 _P3_2	=	0x00b2
                           0000B3   299 G$P3_3$0_0$0 == 0x00b3
                           0000B3   300 _P3_3	=	0x00b3
                           0000B4   301 G$P3_4$0_0$0 == 0x00b4
                           0000B4   302 _P3_4	=	0x00b4
                           0000B5   303 G$P3_5$0_0$0 == 0x00b5
                           0000B5   304 _P3_5	=	0x00b5
                           0000B6   305 G$P3_6$0_0$0 == 0x00b6
                           0000B6   306 _P3_6	=	0x00b6
                           0000B7   307 G$P3_7$0_0$0 == 0x00b7
                           0000B7   308 _P3_7	=	0x00b7
                           0000B0   309 G$RXD$0_0$0 == 0x00b0
                           0000B0   310 _RXD	=	0x00b0
                           0000B1   311 G$TXD$0_0$0 == 0x00b1
                           0000B1   312 _TXD	=	0x00b1
                           0000B2   313 G$INT0$0_0$0 == 0x00b2
                           0000B2   314 _INT0	=	0x00b2
                           0000B3   315 G$INT1$0_0$0 == 0x00b3
                           0000B3   316 _INT1	=	0x00b3
                           0000B4   317 G$T0$0_0$0 == 0x00b4
                           0000B4   318 _T0	=	0x00b4
                           0000B5   319 G$T1$0_0$0 == 0x00b5
                           0000B5   320 _T1	=	0x00b5
                           0000B6   321 G$WR$0_0$0 == 0x00b6
                           0000B6   322 _WR	=	0x00b6
                           0000B7   323 G$RD$0_0$0 == 0x00b7
                           0000B7   324 _RD	=	0x00b7
                           0000B8   325 G$PX0$0_0$0 == 0x00b8
                           0000B8   326 _PX0	=	0x00b8
                           0000B9   327 G$PT0$0_0$0 == 0x00b9
                           0000B9   328 _PT0	=	0x00b9
                           0000BA   329 G$PX1$0_0$0 == 0x00ba
                           0000BA   330 _PX1	=	0x00ba
                           0000BB   331 G$PT1$0_0$0 == 0x00bb
                           0000BB   332 _PT1	=	0x00bb
                           0000BC   333 G$PS$0_0$0 == 0x00bc
                           0000BC   334 _PS	=	0x00bc
                           0000D0   335 G$P$0_0$0 == 0x00d0
                           0000D0   336 _P	=	0x00d0
                           0000D1   337 G$F1$0_0$0 == 0x00d1
                           0000D1   338 _F1	=	0x00d1
                           0000D2   339 G$OV$0_0$0 == 0x00d2
                           0000D2   340 _OV	=	0x00d2
                           0000D3   341 G$RS0$0_0$0 == 0x00d3
                           0000D3   342 _RS0	=	0x00d3
                           0000D4   343 G$RS1$0_0$0 == 0x00d4
                           0000D4   344 _RS1	=	0x00d4
                           0000D5   345 G$F0$0_0$0 == 0x00d5
                           0000D5   346 _F0	=	0x00d5
                           0000D6   347 G$AC$0_0$0 == 0x00d6
                           0000D6   348 _AC	=	0x00d6
                           0000D7   349 G$CY$0_0$0 == 0x00d7
                           0000D7   350 _CY	=	0x00d7
                                    351 ;--------------------------------------------------------
                                    352 ; overlayable register banks
                                    353 ;--------------------------------------------------------
                                    354 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        355 	.ds 8
                                    356 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        357 	.ds 8
                                    358 ;--------------------------------------------------------
                                    359 ; overlayable bit register bank
                                    360 ;--------------------------------------------------------
                                    361 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        362 bits:
      000000                        363 	.ds 1
                           008000   364 	b0 = bits[0]
                           008100   365 	b1 = bits[1]
                           008200   366 	b2 = bits[2]
                           008300   367 	b3 = bits[3]
                           008400   368 	b4 = bits[4]
                           008500   369 	b5 = bits[5]
                           008600   370 	b6 = bits[6]
                           008700   371 	b7 = bits[7]
                                    372 ;--------------------------------------------------------
                                    373 ; internal ram data
                                    374 ;--------------------------------------------------------
                                    375 	.area DSEG    (DATA)
                           000000   376 G$LS_RAM$0_0$0==.
      000000                        377 _LS_RAM::
      000000                        378 	.ds 8
                           000008   379 Lmain.LS_595_DataOut$Col_Data$1_0$30==.
      000008                        380 _LS_595_DataOut_PARM_2:
      000008                        381 	.ds 1
                           000009   382 Lmain.LS_DisplayOneRow$Col_Index$1_0$38==.
      000009                        383 _LS_DisplayOneRow_PARM_2:
      000009                        384 	.ds 1
                           00000A   385 Lmain.LS_Refresh$i$1_0$41==.
      00000A                        386 _LS_Refresh_i_65536_41:
      00000A                        387 	.ds 1
                           00000B   388 Lmain.systick_interrupt$sloc0$0_1$0==.
      00000B                        389 _systick_interrupt_sloc0_1_0:
      00000B                        390 	.ds 8
                           000013   391 Lmain.On_Uart_Idle$length$1_0$58==.
      000013                        392 _On_Uart_Idle_PARM_2:
      000013                        393 	.ds 2
                           000015   394 Lmain.On_Uart_Buff_Full$length$1_0$63==.
      000015                        395 _On_Uart_Buff_Full_PARM_2:
      000015                        396 	.ds 2
                                    397 ;--------------------------------------------------------
                                    398 ; overlayable items in internal ram 
                                    399 ;--------------------------------------------------------
                                    400 ;--------------------------------------------------------
                                    401 ; Stack segment in internal ram 
                                    402 ;--------------------------------------------------------
                                    403 	.area	SSEG
      000000                        404 __start__stack:
      000000                        405 	.ds	1
                                    406 
                                    407 ;--------------------------------------------------------
                                    408 ; indirectly addressable internal ram data
                                    409 ;--------------------------------------------------------
                                    410 	.area ISEG    (DATA)
                           000000   411 G$systick$0_0$0==.
      000000                        412 _systick::
      000000                        413 	.ds 8
                           000008   414 G$Uart_Receive_Buff$0_0$0==.
      000008                        415 _Uart_Receive_Buff::
      000008                        416 	.ds 64
                           000048   417 G$Uart_Receive_Buff_Index$0_0$0==.
      000048                        418 _Uart_Receive_Buff_Index::
      000048                        419 	.ds 1
                           000049   420 G$Last_Receive_Tick$0_0$0==.
      000049                        421 _Last_Receive_Tick::
      000049                        422 	.ds 8
                                    423 ;--------------------------------------------------------
                                    424 ; absolute internal ram data
                                    425 ;--------------------------------------------------------
                                    426 	.area IABS    (ABS,DATA)
                                    427 	.area IABS    (ABS,DATA)
                                    428 ;--------------------------------------------------------
                                    429 ; bit data
                                    430 ;--------------------------------------------------------
                                    431 	.area BSEG    (BIT)
                           000000   432 G$Tx_Busy$0_0$0==.
      000000                        433 _Tx_Busy::
      000000                        434 	.ds 1
                                    435 ;--------------------------------------------------------
                                    436 ; paged external ram data
                                    437 ;--------------------------------------------------------
                                    438 	.area PSEG    (PAG,XDATA)
                                    439 ;--------------------------------------------------------
                                    440 ; external ram data
                                    441 ;--------------------------------------------------------
                                    442 	.area XSEG    (XDATA)
                                    443 ;--------------------------------------------------------
                                    444 ; absolute external ram data
                                    445 ;--------------------------------------------------------
                                    446 	.area XABS    (ABS,XDATA)
                                    447 ;--------------------------------------------------------
                                    448 ; external initialized ram data
                                    449 ;--------------------------------------------------------
                                    450 	.area XISEG   (XDATA)
                                    451 	.area HOME    (CODE)
                                    452 	.area GSINIT0 (CODE)
                                    453 	.area GSINIT1 (CODE)
                                    454 	.area GSINIT2 (CODE)
                                    455 	.area GSINIT3 (CODE)
                                    456 	.area GSINIT4 (CODE)
                                    457 	.area GSINIT5 (CODE)
                                    458 	.area GSINIT  (CODE)
                                    459 	.area GSFINAL (CODE)
                                    460 	.area CSEG    (CODE)
                                    461 ;--------------------------------------------------------
                                    462 ; interrupt vector 
                                    463 ;--------------------------------------------------------
                                    464 	.area HOME    (CODE)
      000000                        465 __interrupt_vect:
      000000 02r00r00         [24]  466 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  467 	reti
      000004                        468 	.ds	7
      00000B 02r00rCF         [24]  469 	ljmp	_systick_interrupt
      00000E                        470 	.ds	5
      000013 32               [24]  471 	reti
      000014                        472 	.ds	7
      00001B 32               [24]  473 	reti
      00001C                        474 	.ds	7
      000023 02r01rD0         [24]  475 	ljmp	_Uart_Interrupt
                                    476 ;--------------------------------------------------------
                                    477 ; global & static initialisations
                                    478 ;--------------------------------------------------------
                                    479 	.area HOME    (CODE)
                                    480 	.area GSINIT  (CODE)
                                    481 	.area GSFINAL (CODE)
                                    482 	.area GSINIT  (CODE)
                                    483 	.globl __sdcc_gsinit_startup
                                    484 	.globl __sdcc_program_startup
                                    485 	.globl __start__stack
                                    486 	.globl __mcs51_genXINIT
                                    487 	.globl __mcs51_genXRAMCLEAR
                                    488 	.globl __mcs51_genRAMCLEAR
                                    489 ;------------------------------------------------------------
                                    490 ;Allocation info for local variables in function 'LS_Refresh'
                                    491 ;------------------------------------------------------------
                                    492 ;i                         Allocated with name '_LS_Refresh_i_65536_41'
                                    493 ;------------------------------------------------------------
                           000000   494 	G$LS_Refresh$0$0 ==.
                           000000   495 	C$LatticeScreen.c$94$1_0$41 ==.
                                    496 ;	LatticeScreen.c:94: static unsigned char i=0;
      000000 75*0A 00         [24]  497 	mov	_LS_Refresh_i_65536_41,#0x00
                           000003   498 	C$LatticeScreen.c$3$1_0$65 ==.
                                    499 ;	LatticeScreen.c:3: unsigned char LS_RAM[8]={0x0,0x10,0x38,0x54,0x10,0x10,0x10,0x0};//默认显示数据，向上的箭头
      000003 75*00 00         [24]  500 	mov	_LS_RAM,#0x00
      000006 75*01 10         [24]  501 	mov	(_LS_RAM + 0x0001),#0x10
      000009 75*02 38         [24]  502 	mov	(_LS_RAM + 0x0002),#0x38
      00000C 75*03 54         [24]  503 	mov	(_LS_RAM + 0x0003),#0x54
      00000F 75*04 10         [24]  504 	mov	(_LS_RAM + 0x0004),#0x10
      000012 75*05 10         [24]  505 	mov	(_LS_RAM + 0x0005),#0x10
      000015 75*06 10         [24]  506 	mov	(_LS_RAM + 0x0006),#0x10
      000018 75*07 00         [24]  507 	mov	(_LS_RAM + 0x0007),#0x00
                           00001B   508 	C$main.c$24$1_0$65 ==.
                                    509 ;	main.c:24: __idata uint64_t systick=0;//系统主时间，由Timer0驱动，需要链接liblonglong.lib,否则无法链接成功
      00001B 78r00            [12]  510 	mov	r0,#_systick
      00001D E4               [12]  511 	clr	a
      00001E F6               [12]  512 	mov	@r0,a
      00001F 08               [12]  513 	inc	r0
      000020 F6               [12]  514 	mov	@r0,a
      000021 08               [12]  515 	inc	r0
      000022 F6               [12]  516 	mov	@r0,a
      000023 08               [12]  517 	inc	r0
      000024 F6               [12]  518 	mov	@r0,a
      000025 08               [12]  519 	inc	r0
      000026 F6               [12]  520 	mov	@r0,a
      000027 08               [12]  521 	inc	r0
      000028 F6               [12]  522 	mov	@r0,a
      000029 08               [12]  523 	inc	r0
      00002A F6               [12]  524 	mov	@r0,a
      00002B 08               [12]  525 	inc	r0
      00002C F6               [12]  526 	mov	@r0,a
                           00002D   527 	C$main.c$125$1_0$65 ==.
                                    528 ;	main.c:125: __idata uint8_t Uart_Receive_Buff[64],Uart_Receive_Buff_Index=0;
      00002D 78r48            [12]  529 	mov	r0,#_Uart_Receive_Buff_Index
      00002F 76 00            [12]  530 	mov	@r0,#0x00
                           000031   531 	C$main.c$126$1_0$65 ==.
                                    532 ;	main.c:126: __idata uint64_t Last_Receive_Tick=0;
      000031 78r49            [12]  533 	mov	r0,#_Last_Receive_Tick
      000033 F6               [12]  534 	mov	@r0,a
      000034 08               [12]  535 	inc	r0
      000035 F6               [12]  536 	mov	@r0,a
      000036 08               [12]  537 	inc	r0
      000037 F6               [12]  538 	mov	@r0,a
      000038 08               [12]  539 	inc	r0
      000039 F6               [12]  540 	mov	@r0,a
      00003A 08               [12]  541 	inc	r0
      00003B F6               [12]  542 	mov	@r0,a
      00003C 08               [12]  543 	inc	r0
      00003D F6               [12]  544 	mov	@r0,a
      00003E 08               [12]  545 	inc	r0
      00003F F6               [12]  546 	mov	@r0,a
      000040 08               [12]  547 	inc	r0
      000041 F6               [12]  548 	mov	@r0,a
                           000042   549 	C$main.c$67$1_0$65 ==.
                                    550 ;	main.c:67: __bit Tx_Busy=0;//串口发送忙标志
                                    551 ;	assignBit
      000042 C2*00            [12]  552 	clr	_Tx_Busy
                                    553 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  554 	ljmp	__sdcc_program_startup
                                    555 ;--------------------------------------------------------
                                    556 ; Home
                                    557 ;--------------------------------------------------------
                                    558 	.area HOME    (CODE)
                                    559 	.area HOME    (CODE)
      000026                        560 __sdcc_program_startup:
      000026 02r02r88         [24]  561 	ljmp	_main
                                    562 ;	return from main will return to caller
                                    563 ;--------------------------------------------------------
                                    564 ; code
                                    565 ;--------------------------------------------------------
                                    566 	.area CSEG    (CODE)
                                    567 ;------------------------------------------------------------
                                    568 ;Allocation info for local variables in function 'LS_Init'
                                    569 ;------------------------------------------------------------
                                    570 ;P1M1                      Allocated with name '_LS_Init_P1M1_65536_28'
                                    571 ;P1M0                      Allocated with name '_LS_Init_P1M0_65536_28'
                                    572 ;------------------------------------------------------------
                           000000   573 	G$LS_Init$0$0 ==.
                           000000   574 	C$LatticeScreen.c$7$0_0$28 ==.
                                    575 ;	LatticeScreen.c:7: void LS_Init()
                                    576 ;	-----------------------------------------
                                    577 ;	 function LS_Init
                                    578 ;	-----------------------------------------
      000000                        579 _LS_Init:
                           000007   580 	ar7 = 0x07
                           000006   581 	ar6 = 0x06
                           000005   582 	ar5 = 0x05
                           000004   583 	ar4 = 0x04
                           000003   584 	ar3 = 0x03
                           000002   585 	ar2 = 0x02
                           000001   586 	ar1 = 0x01
                           000000   587 	ar0 = 0x00
                           000000   588 	C$LatticeScreen.c$14$1_0$28 ==.
                                    589 ;	LatticeScreen.c:14: P1M0|=0x3f;
      000000 43 92 3F         [24]  590 	orl	_LS_Init_P1M0_65536_28,#0x3f
                           000003   591 	C$LatticeScreen.c$15$1_0$28 ==.
                                    592 ;	LatticeScreen.c:15: P1M1&=~0x3f;
      000003 53 91 C0         [24]  593 	anl	_LS_Init_P1M1_65536_28,#0xc0
                           000006   594 	C$LatticeScreen.c$18$1_0$28 ==.
                                    595 ;	LatticeScreen.c:18: RCK=0;
                                    596 ;	assignBit
      000006 C2 94            [12]  597 	clr	_P1_4
                           000008   598 	C$LatticeScreen.c$19$1_0$28 ==.
                                    599 ;	LatticeScreen.c:19: SCK=0;
                                    600 ;	assignBit
      000008 C2 95            [12]  601 	clr	_P1_5
                           00000A   602 	C$LatticeScreen.c$22$1_0$28 ==.
                                    603 ;	LatticeScreen.c:22: SCLR=0;
                                    604 ;	assignBit
      00000A C2 90            [12]  605 	clr	_P1_0
                           00000C   606 	C$LatticeScreen.c$23$1_0$28 ==.
                                    607 ;	LatticeScreen.c:23: SCLR=1;
                                    608 ;	assignBit
      00000C D2 90            [12]  609 	setb	_P1_0
                           00000E   610 	C$LatticeScreen.c$25$1_0$28 ==.
                                    611 ;	LatticeScreen.c:25: OE=0;
                                    612 ;	assignBit
      00000E C2 91            [12]  613 	clr	_P1_1
                           000010   614 	C$LatticeScreen.c$26$1_0$28 ==.
                                    615 ;	LatticeScreen.c:26: }
                           000010   616 	C$LatticeScreen.c$26$1_0$28 ==.
                           000010   617 	XG$LS_Init$0$0 ==.
      000010 22               [24]  618 	ret
                                    619 ;------------------------------------------------------------
                                    620 ;Allocation info for local variables in function 'LS_Deinit'
                                    621 ;------------------------------------------------------------
                                    622 ;P1M1                      Allocated with name '_LS_Deinit_P1M1_65536_29'
                                    623 ;P1M0                      Allocated with name '_LS_Deinit_P1M0_65536_29'
                                    624 ;------------------------------------------------------------
                           000011   625 	G$LS_Deinit$0$0 ==.
                           000011   626 	C$LatticeScreen.c$28$1_0$29 ==.
                                    627 ;	LatticeScreen.c:28: void LS_Deinit()
                                    628 ;	-----------------------------------------
                                    629 ;	 function LS_Deinit
                                    630 ;	-----------------------------------------
      000011                        631 _LS_Deinit:
                           000011   632 	C$LatticeScreen.c$34$1_0$29 ==.
                                    633 ;	LatticeScreen.c:34: P1M0&=~0x3f;
      000011 53 92 C0         [24]  634 	anl	_LS_Deinit_P1M0_65536_29,#0xc0
                           000014   635 	C$LatticeScreen.c$35$1_0$29 ==.
                                    636 ;	LatticeScreen.c:35: P1M1&=~0x3f;
      000014 53 91 C0         [24]  637 	anl	_LS_Deinit_P1M1_65536_29,#0xc0
                           000017   638 	C$LatticeScreen.c$38$1_0$29 ==.
                                    639 ;	LatticeScreen.c:38: RCK=0;
                                    640 ;	assignBit
      000017 C2 94            [12]  641 	clr	_P1_4
                           000019   642 	C$LatticeScreen.c$39$1_0$29 ==.
                                    643 ;	LatticeScreen.c:39: SCK=0;
                                    644 ;	assignBit
      000019 C2 95            [12]  645 	clr	_P1_5
                           00001B   646 	C$LatticeScreen.c$42$1_0$29 ==.
                                    647 ;	LatticeScreen.c:42: SCLR=0;
                                    648 ;	assignBit
      00001B C2 90            [12]  649 	clr	_P1_0
                           00001D   650 	C$LatticeScreen.c$44$1_0$29 ==.
                                    651 ;	LatticeScreen.c:44: OE=1;
                                    652 ;	assignBit
      00001D D2 91            [12]  653 	setb	_P1_1
                           00001F   654 	C$LatticeScreen.c$45$1_0$29 ==.
                                    655 ;	LatticeScreen.c:45: }
                           00001F   656 	C$LatticeScreen.c$45$1_0$29 ==.
                           00001F   657 	XG$LS_Deinit$0$0 ==.
      00001F 22               [24]  658 	ret
                                    659 ;------------------------------------------------------------
                                    660 ;Allocation info for local variables in function 'LS_595_DataOut'
                                    661 ;------------------------------------------------------------
                                    662 ;Col_Data                  Allocated with name '_LS_595_DataOut_PARM_2'
                                    663 ;Row_Data                  Allocated to registers r7 
                                    664 ;i                         Allocated to registers r6 
                                    665 ;------------------------------------------------------------
                           000020   666 	G$LS_595_DataOut$0$0 ==.
                           000020   667 	C$LatticeScreen.c$47$1_0$31 ==.
                                    668 ;	LatticeScreen.c:47: void LS_595_DataOut(unsigned char Row_Data,unsigned char Col_Data)//输出数据到595
                                    669 ;	-----------------------------------------
                                    670 ;	 function LS_595_DataOut
                                    671 ;	-----------------------------------------
      000020                        672 _LS_595_DataOut:
      000020 AF 82            [24]  673 	mov	r7,dpl
                           000022   674 	C$LatticeScreen.c$51$1_0$31 ==.
                                    675 ;	LatticeScreen.c:51: RCK=0;
                                    676 ;	assignBit
      000022 C2 94            [12]  677 	clr	_P1_4
                           000024   678 	C$LatticeScreen.c$52$1_0$31 ==.
                                    679 ;	LatticeScreen.c:52: SCK=0;
                                    680 ;	assignBit
      000024 C2 95            [12]  681 	clr	_P1_5
                           000026   682 	C$LatticeScreen.c$54$2_0$32 ==.
                                    683 ;	LatticeScreen.c:54: for(i=0;i<8;i++)
      000026 7E 00            [12]  684 	mov	r6,#0x00
      000028                        685 00108$:
                           000028   686 	C$LatticeScreen.c$56$3_0$33 ==.
                                    687 ;	LatticeScreen.c:56: SCK=0;
                                    688 ;	assignBit
      000028 C2 95            [12]  689 	clr	_P1_5
                           00002A   690 	C$LatticeScreen.c$57$3_0$33 ==.
                                    691 ;	LatticeScreen.c:57: if(Row_Data & (1<<i))
      00002A 8E F0            [24]  692 	mov	b,r6
      00002C 05 F0            [12]  693 	inc	b
      00002E 7C 01            [12]  694 	mov	r4,#0x01
      000030 7D 00            [12]  695 	mov	r5,#0x00
      000032 80 06            [24]  696 	sjmp	00129$
      000034                        697 00128$:
      000034 EC               [12]  698 	mov	a,r4
      000035 2C               [12]  699 	add	a,r4
      000036 FC               [12]  700 	mov	r4,a
      000037 ED               [12]  701 	mov	a,r5
      000038 33               [12]  702 	rlc	a
      000039 FD               [12]  703 	mov	r5,a
      00003A                        704 00129$:
      00003A D5 F0 F7         [24]  705 	djnz	b,00128$
      00003D 8F 02            [24]  706 	mov	ar2,r7
      00003F 7B 00            [12]  707 	mov	r3,#0x00
      000041 EA               [12]  708 	mov	a,r2
      000042 52 04            [12]  709 	anl	ar4,a
      000044 EB               [12]  710 	mov	a,r3
      000045 52 05            [12]  711 	anl	ar5,a
      000047 EC               [12]  712 	mov	a,r4
      000048 4D               [12]  713 	orl	a,r5
      000049 60 04            [24]  714 	jz	00102$
                           00004B   715 	C$LatticeScreen.c$59$4_0$34 ==.
                                    716 ;	LatticeScreen.c:59: ROW_IN=1;
                                    717 ;	assignBit
      00004B D2 92            [12]  718 	setb	_P1_2
      00004D 80 02            [24]  719 	sjmp	00103$
      00004F                        720 00102$:
                           00004F   721 	C$LatticeScreen.c$63$4_0$35 ==.
                                    722 ;	LatticeScreen.c:63: ROW_IN=0;
                                    723 ;	assignBit
      00004F C2 92            [12]  724 	clr	_P1_2
      000051                        725 00103$:
                           000051   726 	C$LatticeScreen.c$66$3_0$33 ==.
                                    727 ;	LatticeScreen.c:66: if(Col_Data & (1<<i))
      000051 8E F0            [24]  728 	mov	b,r6
      000053 05 F0            [12]  729 	inc	b
      000055 7C 01            [12]  730 	mov	r4,#0x01
      000057 7D 00            [12]  731 	mov	r5,#0x00
      000059 80 06            [24]  732 	sjmp	00132$
      00005B                        733 00131$:
      00005B EC               [12]  734 	mov	a,r4
      00005C 2C               [12]  735 	add	a,r4
      00005D FC               [12]  736 	mov	r4,a
      00005E ED               [12]  737 	mov	a,r5
      00005F 33               [12]  738 	rlc	a
      000060 FD               [12]  739 	mov	r5,a
      000061                        740 00132$:
      000061 D5 F0 F7         [24]  741 	djnz	b,00131$
      000064 AA*08            [24]  742 	mov	r2,_LS_595_DataOut_PARM_2
      000066 7B 00            [12]  743 	mov	r3,#0x00
      000068 EA               [12]  744 	mov	a,r2
      000069 52 04            [12]  745 	anl	ar4,a
      00006B EB               [12]  746 	mov	a,r3
      00006C 52 05            [12]  747 	anl	ar5,a
      00006E EC               [12]  748 	mov	a,r4
      00006F 4D               [12]  749 	orl	a,r5
      000070 60 04            [24]  750 	jz	00105$
                           000072   751 	C$LatticeScreen.c$68$4_0$36 ==.
                                    752 ;	LatticeScreen.c:68: COL_IN=1;
                                    753 ;	assignBit
      000072 D2 93            [12]  754 	setb	_P1_3
      000074 80 02            [24]  755 	sjmp	00106$
      000076                        756 00105$:
                           000076   757 	C$LatticeScreen.c$72$4_0$37 ==.
                                    758 ;	LatticeScreen.c:72: COL_IN=0;
                                    759 ;	assignBit
      000076 C2 93            [12]  760 	clr	_P1_3
      000078                        761 00106$:
                           000078   762 	C$LatticeScreen.c$75$3_0$33 ==.
                                    763 ;	LatticeScreen.c:75: SCK=1;
                                    764 ;	assignBit
      000078 D2 95            [12]  765 	setb	_P1_5
                           00007A   766 	C$LatticeScreen.c$54$2_0$32 ==.
                                    767 ;	LatticeScreen.c:54: for(i=0;i<8;i++)
      00007A 0E               [12]  768 	inc	r6
      00007B BE 08 00         [24]  769 	cjne	r6,#0x08,00134$
      00007E                        770 00134$:
      00007E 40 A8            [24]  771 	jc	00108$
                           000080   772 	C$LatticeScreen.c$78$1_0$31 ==.
                                    773 ;	LatticeScreen.c:78: RCK=1;
                                    774 ;	assignBit
      000080 D2 94            [12]  775 	setb	_P1_4
                           000082   776 	C$LatticeScreen.c$80$1_0$31 ==.
                                    777 ;	LatticeScreen.c:80: }
                           000082   778 	C$LatticeScreen.c$80$1_0$31 ==.
                           000082   779 	XG$LS_595_DataOut$0$0 ==.
      000082 22               [24]  780 	ret
                                    781 ;------------------------------------------------------------
                                    782 ;Allocation info for local variables in function 'LS_DisplayOneRow'
                                    783 ;------------------------------------------------------------
                                    784 ;Col_Index                 Allocated with name '_LS_DisplayOneRow_PARM_2'
                                    785 ;Row_Data                  Allocated to registers r7 
                                    786 ;------------------------------------------------------------
                           000083   787 	G$LS_DisplayOneRow$0$0 ==.
                           000083   788 	C$LatticeScreen.c$83$1_0$39 ==.
                                    789 ;	LatticeScreen.c:83: void LS_DisplayOneRow(unsigned char Row_Data,unsigned char Col_Index)
                                    790 ;	-----------------------------------------
                                    791 ;	 function LS_DisplayOneRow
                                    792 ;	-----------------------------------------
      000083                        793 _LS_DisplayOneRow:
      000083 AF 82            [24]  794 	mov	r7,dpl
                           000085   795 	C$LatticeScreen.c$85$1_0$39 ==.
                                    796 ;	LatticeScreen.c:85: if(Col_Index < 8)
      000085 74 F8            [12]  797 	mov	a,#0x100 - 0x08
      000087 25*09            [12]  798 	add	a,_LS_DisplayOneRow_PARM_2
      000089 40 17            [24]  799 	jc	00103$
                           00008B   800 	C$LatticeScreen.c$87$2_0$40 ==.
                                    801 ;	LatticeScreen.c:87: LS_595_DataOut(Row_Data,~(1<<Col_Index));	
      00008B AE*09            [24]  802 	mov	r6,_LS_DisplayOneRow_PARM_2
      00008D 8E F0            [24]  803 	mov	b,r6
      00008F 05 F0            [12]  804 	inc	b
      000091 74 01            [12]  805 	mov	a,#0x01
      000093 80 02            [24]  806 	sjmp	00112$
      000095                        807 00110$:
      000095 25 E0            [12]  808 	add	a,acc
      000097                        809 00112$:
      000097 D5 F0 FB         [24]  810 	djnz	b,00110$
      00009A F4               [12]  811 	cpl	a
      00009B F5*08            [12]  812 	mov	_LS_595_DataOut_PARM_2,a
      00009D 8F 82            [24]  813 	mov	dpl,r7
      00009F 12r00r20         [24]  814 	lcall	_LS_595_DataOut
      0000A2                        815 00103$:
                           0000A2   816 	C$LatticeScreen.c$90$1_0$39 ==.
                                    817 ;	LatticeScreen.c:90: }
                           0000A2   818 	C$LatticeScreen.c$90$1_0$39 ==.
                           0000A2   819 	XG$LS_DisplayOneRow$0$0 ==.
      0000A2 22               [24]  820 	ret
                                    821 ;------------------------------------------------------------
                                    822 ;Allocation info for local variables in function 'LS_Refresh'
                                    823 ;------------------------------------------------------------
                                    824 ;i                         Allocated with name '_LS_Refresh_i_65536_41'
                                    825 ;------------------------------------------------------------
                           0000A3   826 	G$LS_Refresh$0$0 ==.
                           0000A3   827 	C$LatticeScreen.c$92$1_0$41 ==.
                                    828 ;	LatticeScreen.c:92: void LS_Refresh()
                                    829 ;	-----------------------------------------
                                    830 ;	 function LS_Refresh
                                    831 ;	-----------------------------------------
      0000A3                        832 _LS_Refresh:
                           0000A3   833 	C$LatticeScreen.c$95$1_0$41 ==.
                                    834 ;	LatticeScreen.c:95: LS_DisplayOneRow(LS_RAM[i],i++);
      0000A3 E5*0A            [12]  835 	mov	a,_LS_Refresh_i_65536_41
      0000A5 24r00            [12]  836 	add	a,#_LS_RAM
      0000A7 F9               [12]  837 	mov	r1,a
      0000A8 87 82            [24]  838 	mov	dpl,@r1
      0000AA 85*0A*09         [24]  839 	mov	_LS_DisplayOneRow_PARM_2,_LS_Refresh_i_65536_41
      0000AD 05*0A            [12]  840 	inc	_LS_Refresh_i_65536_41
      0000AF 12r00r83         [24]  841 	lcall	_LS_DisplayOneRow
                           0000B2   842 	C$LatticeScreen.c$96$1_0$41 ==.
                                    843 ;	LatticeScreen.c:96: if(i>=8)
      0000B2 74 F8            [12]  844 	mov	a,#0x100 - 0x08
      0000B4 25*0A            [12]  845 	add	a,_LS_Refresh_i_65536_41
      0000B6 50 03            [24]  846 	jnc	00103$
                           0000B8   847 	C$LatticeScreen.c$97$1_0$41 ==.
                                    848 ;	LatticeScreen.c:97: i=0;
      0000B8 75*0A 00         [24]  849 	mov	_LS_Refresh_i_65536_41,#0x00
      0000BB                        850 00103$:
                           0000BB   851 	C$LatticeScreen.c$98$1_0$41 ==.
                                    852 ;	LatticeScreen.c:98: }
                           0000BB   853 	C$LatticeScreen.c$98$1_0$41 ==.
                           0000BB   854 	XG$LS_Refresh$0$0 ==.
      0000BB 22               [24]  855 	ret
                                    856 ;------------------------------------------------------------
                                    857 ;Allocation info for local variables in function 'systick_init'
                                    858 ;------------------------------------------------------------
                                    859 ;AUXR                      Allocated with name '_systick_init_AUXR_65536_42'
                                    860 ;------------------------------------------------------------
                           0000BC   861 	G$systick_init$0$0 ==.
                           0000BC   862 	C$main.c$25$1_0$42 ==.
                                    863 ;	main.c:25: void systick_init()
                                    864 ;	-----------------------------------------
                                    865 ;	 function systick_init
                                    866 ;	-----------------------------------------
      0000BC                        867 _systick_init:
                           0000BC   868 	C$main.c$28$1_0$42 ==.
                                    869 ;	main.c:28: AUXR |= 0x80;                   //定时器0为1T模式
      0000BC 43 8E 80         [24]  870 	orl	_systick_init_AUXR_65536_42,#0x80
                           0000BF   871 	C$main.c$29$1_0$42 ==.
                                    872 ;	main.c:29: TMOD &= ~0x0f;                    //设置定时器为模式0(16位自动重装载)
      0000BF 53 89 F0         [24]  873 	anl	_TMOD,#0xf0
                           0000C2   874 	C$main.c$30$1_0$42 ==.
                                    875 ;	main.c:30: TL0 = T1MS;                     //初始化计时值
      0000C2 75 8A 67         [24]  876 	mov	_TL0,#0x67
                           0000C5   877 	C$main.c$31$1_0$42 ==.
                                    878 ;	main.c:31: TH0 = T1MS >> 8;
      0000C5 75 8C 7E         [24]  879 	mov	_TH0,#0x7e
                           0000C8   880 	C$main.c$32$1_0$42 ==.
                                    881 ;	main.c:32: TR0 = 1;                        //定时器0开始计时
                                    882 ;	assignBit
      0000C8 D2 8C            [12]  883 	setb	_TR0
                           0000CA   884 	C$main.c$33$1_0$42 ==.
                                    885 ;	main.c:33: ET0 = 1;                        //使能定时器0中断
                                    886 ;	assignBit
      0000CA D2 A9            [12]  887 	setb	_ET0
                           0000CC   888 	C$main.c$34$1_0$42 ==.
                                    889 ;	main.c:34: EA = 1;
                                    890 ;	assignBit
      0000CC D2 AF            [12]  891 	setb	_EA
                           0000CE   892 	C$main.c$35$1_0$42 ==.
                                    893 ;	main.c:35: }
                           0000CE   894 	C$main.c$35$1_0$42 ==.
                           0000CE   895 	XG$systick_init$0$0 ==.
      0000CE 22               [24]  896 	ret
                                    897 ;------------------------------------------------------------
                                    898 ;Allocation info for local variables in function 'systick_interrupt'
                                    899 ;------------------------------------------------------------
                                    900 ;sloc0                     Allocated with name '_systick_interrupt_sloc0_1_0'
                                    901 ;------------------------------------------------------------
                           0000CF   902 	G$systick_interrupt$0$0 ==.
                           0000CF   903 	C$main.c$42$1_0$44 ==.
                                    904 ;	main.c:42: void systick_interrupt() __interrupt (1) __using (1) 
                                    905 ;	-----------------------------------------
                                    906 ;	 function systick_interrupt
                                    907 ;	-----------------------------------------
      0000CF                        908 _systick_interrupt:
                           00000F   909 	ar7 = 0x0f
                           00000E   910 	ar6 = 0x0e
                           00000D   911 	ar5 = 0x0d
                           00000C   912 	ar4 = 0x0c
                           00000B   913 	ar3 = 0x0b
                           00000A   914 	ar2 = 0x0a
                           000009   915 	ar1 = 0x09
                           000008   916 	ar0 = 0x08
      0000CF C0*00            [24]  917 	push	bits
      0000D1 C0 E0            [24]  918 	push	acc
      0000D3 C0 F0            [24]  919 	push	b
      0000D5 C0 82            [24]  920 	push	dpl
      0000D7 C0 83            [24]  921 	push	dph
      0000D9 C0 07            [24]  922 	push	(0+7)
      0000DB C0 06            [24]  923 	push	(0+6)
      0000DD C0 05            [24]  924 	push	(0+5)
      0000DF C0 04            [24]  925 	push	(0+4)
      0000E1 C0 03            [24]  926 	push	(0+3)
      0000E3 C0 02            [24]  927 	push	(0+2)
      0000E5 C0 01            [24]  928 	push	(0+1)
      0000E7 C0 00            [24]  929 	push	(0+0)
      0000E9 C0 D0            [24]  930 	push	psw
      0000EB 75 D0 08         [24]  931 	mov	psw,#0x08
                           0000EE   932 	C$main.c$44$1_0$44 ==.
                                    933 ;	main.c:44: systick++;
      0000EE 78r00            [12]  934 	mov	r0,#_systick
      0000F0 06               [12]  935 	inc	@r0
      0000F1 B6 00 20         [24]  936 	cjne	@r0,#0x00,00115$
      0000F4 08               [12]  937 	inc	r0
      0000F5 06               [12]  938 	inc	@r0
      0000F6 B6 00 1B         [24]  939 	cjne	@r0,#0x00,00115$
      0000F9 08               [12]  940 	inc	r0
      0000FA 06               [12]  941 	inc	@r0
      0000FB B6 00 16         [24]  942 	cjne	@r0,#0x00,00115$
      0000FE 08               [12]  943 	inc	r0
      0000FF 06               [12]  944 	inc	@r0
      000100 B6 00 11         [24]  945 	cjne	@r0,#0x00,00115$
      000103 08               [12]  946 	inc	r0
      000104 06               [12]  947 	inc	@r0
      000105 B6 00 0C         [24]  948 	cjne	@r0,#0x00,00115$
      000108 08               [12]  949 	inc	r0
      000109 06               [12]  950 	inc	@r0
      00010A B6 00 07         [24]  951 	cjne	@r0,#0x00,00115$
      00010D 08               [12]  952 	inc	r0
      00010E 06               [12]  953 	inc	@r0
      00010F B6 00 02         [24]  954 	cjne	@r0,#0x00,00115$
      000112 08               [12]  955 	inc	r0
      000113 06               [12]  956 	inc	@r0
      000114                        957 00115$:
                           000114   958 	C$main.c$45$1_0$44 ==.
                                    959 ;	main.c:45: if(Uart_Receive_Buff_Index!=0)
      000114 78r48            [12]  960 	mov	r0,#_Uart_Receive_Buff_Index
      000116 E6               [12]  961 	mov	a,@r0
      000117 60 65            [24]  962 	jz	00104$
                           000119   963 	C$main.c$47$2_0$45 ==.
                                    964 ;	main.c:47: if(systick>Last_Receive_Tick+1)
      000119 78r49            [12]  965 	mov	r0,#_Last_Receive_Tick
      00011B 74 01            [12]  966 	mov	a,#0x01
      00011D 26               [12]  967 	add	a,@r0
      00011E F5*0B            [12]  968 	mov	_systick_interrupt_sloc0_1_0,a
      000120 E4               [12]  969 	clr	a
      000121 08               [12]  970 	inc	r0
      000122 36               [12]  971 	addc	a,@r0
      000123 F5*0C            [12]  972 	mov	(_systick_interrupt_sloc0_1_0 + 1),a
      000125 E4               [12]  973 	clr	a
      000126 08               [12]  974 	inc	r0
      000127 36               [12]  975 	addc	a,@r0
      000128 F5*0D            [12]  976 	mov	(_systick_interrupt_sloc0_1_0 + 2),a
      00012A E4               [12]  977 	clr	a
      00012B 08               [12]  978 	inc	r0
      00012C 36               [12]  979 	addc	a,@r0
      00012D F5*0E            [12]  980 	mov	(_systick_interrupt_sloc0_1_0 + 3),a
      00012F E4               [12]  981 	clr	a
      000130 08               [12]  982 	inc	r0
      000131 36               [12]  983 	addc	a,@r0
      000132 F5*0F            [12]  984 	mov	(_systick_interrupt_sloc0_1_0 + 4),a
      000134 E4               [12]  985 	clr	a
      000135 08               [12]  986 	inc	r0
      000136 36               [12]  987 	addc	a,@r0
      000137 F5*10            [12]  988 	mov	(_systick_interrupt_sloc0_1_0 + 5),a
      000139 E4               [12]  989 	clr	a
      00013A 08               [12]  990 	inc	r0
      00013B 36               [12]  991 	addc	a,@r0
      00013C F5*11            [12]  992 	mov	(_systick_interrupt_sloc0_1_0 + 6),a
      00013E E4               [12]  993 	clr	a
      00013F 08               [12]  994 	inc	r0
      000140 36               [12]  995 	addc	a,@r0
      000141 F5*12            [12]  996 	mov	(_systick_interrupt_sloc0_1_0 + 7),a
      000143 78r00            [12]  997 	mov	r0,#_systick
      000145 C3               [12]  998 	clr	c
      000146 E5*0B            [12]  999 	mov	a,_systick_interrupt_sloc0_1_0
      000148 96               [12] 1000 	subb	a,@r0
      000149 E5*0C            [12] 1001 	mov	a,(_systick_interrupt_sloc0_1_0 + 1)
      00014B 08               [12] 1002 	inc	r0
      00014C 96               [12] 1003 	subb	a,@r0
      00014D E5*0D            [12] 1004 	mov	a,(_systick_interrupt_sloc0_1_0 + 2)
      00014F 08               [12] 1005 	inc	r0
      000150 96               [12] 1006 	subb	a,@r0
      000151 E5*0E            [12] 1007 	mov	a,(_systick_interrupt_sloc0_1_0 + 3)
      000153 08               [12] 1008 	inc	r0
      000154 96               [12] 1009 	subb	a,@r0
      000155 E5*0F            [12] 1010 	mov	a,(_systick_interrupt_sloc0_1_0 + 4)
      000157 08               [12] 1011 	inc	r0
      000158 96               [12] 1012 	subb	a,@r0
      000159 E5*10            [12] 1013 	mov	a,(_systick_interrupt_sloc0_1_0 + 5)
      00015B 08               [12] 1014 	inc	r0
      00015C 96               [12] 1015 	subb	a,@r0
      00015D E5*11            [12] 1016 	mov	a,(_systick_interrupt_sloc0_1_0 + 6)
      00015F 08               [12] 1017 	inc	r0
      000160 96               [12] 1018 	subb	a,@r0
      000161 E5*12            [12] 1019 	mov	a,(_systick_interrupt_sloc0_1_0 + 7)
      000163 08               [12] 1020 	inc	r0
      000164 96               [12] 1021 	subb	a,@r0
      000165 50 17            [24] 1022 	jnc	00104$
                           000167  1023 	C$main.c$49$3_0$46 ==.
                                   1024 ;	main.c:49: On_Uart_Idle(Uart_Receive_Buff,Uart_Receive_Buff_Index);
      000167 78r48            [12] 1025 	mov	r0,#_Uart_Receive_Buff_Index
      000169 86*13            [24] 1026 	mov	_On_Uart_Idle_PARM_2,@r0
      00016B 75*14 00         [24] 1027 	mov	(_On_Uart_Idle_PARM_2 + 1),#0x00
      00016E 75 82r08         [24] 1028 	mov	dpl,#_Uart_Receive_Buff
      000171 75 D0 00         [24] 1029 	mov	psw,#0x00
      000174 12r02r64         [24] 1030 	lcall	_On_Uart_Idle
      000177 75 D0 08         [24] 1031 	mov	psw,#0x08
                           00017A  1032 	C$main.c$50$3_0$46 ==.
                                   1033 ;	main.c:50: Uart_Receive_Buff_Index=0;
      00017A 78r48            [12] 1034 	mov	r0,#_Uart_Receive_Buff_Index
      00017C 76 00            [12] 1035 	mov	@r0,#0x00
      00017E                       1036 00104$:
                           00017E  1037 	C$main.c$53$1_0$44 ==.
                                   1038 ;	main.c:53: On_SysTick_Timer();
      00017E 75 D0 00         [24] 1039 	mov	psw,#0x00
      000181 12r02r60         [24] 1040 	lcall	_On_SysTick_Timer
      000184 75 D0 08         [24] 1041 	mov	psw,#0x08
                           000187  1042 	C$main.c$54$1_0$44 ==.
                                   1043 ;	main.c:54: }
      000187 D0 D0            [24] 1044 	pop	psw
      000189 D0 00            [24] 1045 	pop	(0+0)
      00018B D0 01            [24] 1046 	pop	(0+1)
      00018D D0 02            [24] 1047 	pop	(0+2)
      00018F D0 03            [24] 1048 	pop	(0+3)
      000191 D0 04            [24] 1049 	pop	(0+4)
      000193 D0 05            [24] 1050 	pop	(0+5)
      000195 D0 06            [24] 1051 	pop	(0+6)
      000197 D0 07            [24] 1052 	pop	(0+7)
      000199 D0 83            [24] 1053 	pop	dph
      00019B D0 82            [24] 1054 	pop	dpl
      00019D D0 F0            [24] 1055 	pop	b
      00019F D0 E0            [24] 1056 	pop	acc
      0001A1 D0*00            [24] 1057 	pop	bits
                           0001A3  1058 	C$main.c$54$1_0$44 ==.
                           0001A3  1059 	XG$systick_interrupt$0$0 ==.
      0001A3 32               [24] 1060 	reti
                                   1061 ;------------------------------------------------------------
                                   1062 ;Allocation info for local variables in function 'Uart_Init'
                                   1063 ;------------------------------------------------------------
                                   1064 ;AUXR                      Allocated with name '_Uart_Init_AUXR_65536_47'
                                   1065 ;T2H                       Allocated with name '_Uart_Init_T2H_65536_47'
                                   1066 ;T2L                       Allocated with name '_Uart_Init_T2L_65536_47'
                                   1067 ;P_SW1                     Allocated with name '_Uart_Init_P_SW1_65536_47'
                                   1068 ;------------------------------------------------------------
                           0001A4  1069 	G$Uart_Init$0$0 ==.
                           0001A4  1070 	C$main.c$68$1_0$47 ==.
                                   1071 ;	main.c:68: void Uart_Init()
                                   1072 ;	-----------------------------------------
                                   1073 ;	 function Uart_Init
                                   1074 ;	-----------------------------------------
      0001A4                       1075 _Uart_Init:
                           000007  1076 	ar7 = 0x07
                           000006  1077 	ar6 = 0x06
                           000005  1078 	ar5 = 0x05
                           000004  1079 	ar4 = 0x04
                           000003  1080 	ar3 = 0x03
                           000002  1081 	ar2 = 0x02
                           000001  1082 	ar1 = 0x01
                           000000  1083 	ar0 = 0x00
                           0001A4  1084 	C$main.c$74$1_0$47 ==.
                                   1085 ;	main.c:74: ACC = P_SW1;
      0001A4 85 A2 E0         [24] 1086 	mov	_ACC,_Uart_Init_P_SW1_65536_47
                           0001A7  1087 	C$main.c$75$1_0$47 ==.
                                   1088 ;	main.c:75: ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
      0001A7 53 E0 3F         [24] 1089 	anl	_ACC,#0x3f
                           0001AA  1090 	C$main.c$76$1_0$47 ==.
                                   1091 ;	main.c:76: P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
      0001AA 85 E0 A2         [24] 1092 	mov	_Uart_Init_P_SW1_65536_47,_ACC
                           0001AD  1093 	C$main.c$88$1_0$47 ==.
                                   1094 ;	main.c:88: SCON = 0x50;                //8位可变波特率
      0001AD 75 98 50         [24] 1095 	mov	_SCON,#0x50
                           0001B0  1096 	C$main.c$95$1_0$47 ==.
                                   1097 ;	main.c:95: T2L = (65536 - (FOSC/4/BAUD)) & 0xff;   //设置波特率重装值
      0001B0 75 D7 B8         [24] 1098 	mov	_Uart_Init_T2L_65536_47,#0xb8
                           0001B3  1099 	C$main.c$96$1_0$47 ==.
                                   1100 ;	main.c:96: T2H = (65536 - (FOSC/4/BAUD))>>8;
      0001B3 75 D6 FF         [24] 1101 	mov	_Uart_Init_T2H_65536_47,#0xff
                           0001B6  1102 	C$main.c$97$1_0$47 ==.
                                   1103 ;	main.c:97: AUXR |= 0x14;                //T2为1T模式, 并启动定时器2
      0001B6 43 8E 14         [24] 1104 	orl	_Uart_Init_AUXR_65536_47,#0x14
                           0001B9  1105 	C$main.c$98$1_0$47 ==.
                                   1106 ;	main.c:98: AUXR |= 0x01;               //选择定时器2为串口1的波特率发生器
      0001B9 43 8E 01         [24] 1107 	orl	_Uart_Init_AUXR_65536_47,#0x01
                           0001BC  1108 	C$main.c$99$1_0$47 ==.
                                   1109 ;	main.c:99: ES = 1;                     //使能串口1中断
                                   1110 ;	assignBit
      0001BC D2 AC            [12] 1111 	setb	_ES
                           0001BE  1112 	C$main.c$100$1_0$47 ==.
                                   1113 ;	main.c:100: EA = 1;
                                   1114 ;	assignBit
      0001BE D2 AF            [12] 1115 	setb	_EA
                           0001C0  1116 	C$main.c$101$1_0$47 ==.
                                   1117 ;	main.c:101: }
                           0001C0  1118 	C$main.c$101$1_0$47 ==.
                           0001C0  1119 	XG$Uart_Init$0$0 ==.
      0001C0 22               [24] 1120 	ret
                                   1121 ;------------------------------------------------------------
                                   1122 ;Allocation info for local variables in function 'Uart_Send'
                                   1123 ;------------------------------------------------------------
                                   1124 ;data                      Allocated to registers r7 
                                   1125 ;------------------------------------------------------------
                           0001C1  1126 	G$Uart_Send$0$0 ==.
                           0001C1  1127 	C$main.c$102$1_0$49 ==.
                                   1128 ;	main.c:102: void Uart_Send(uint8_t data)
                                   1129 ;	-----------------------------------------
                                   1130 ;	 function Uart_Send
                                   1131 ;	-----------------------------------------
      0001C1                       1132 _Uart_Send:
      0001C1 AF 82            [24] 1133 	mov	r7,dpl
                           0001C3  1134 	C$main.c$104$1_0$49 ==.
                                   1135 ;	main.c:104: while(Tx_Busy);//串口发送忙标志
      0001C3                       1136 00101$:
      0001C3 20*00 FD         [24] 1137 	jb	_Tx_Busy,00101$
                           0001C6  1138 	C$main.c$105$1_0$49 ==.
                                   1139 ;	main.c:105: ACC = data;                  //获取校验位P (PSW.0)
      0001C6 8F E0            [24] 1140 	mov	_ACC,r7
                           0001C8  1141 	C$main.c$106$1_0$49 ==.
                                   1142 ;	main.c:106: if (P)                      //根据P来设置校验位
      0001C8 A2 D0            [12] 1143 	mov	c,_P
                           0001CA  1144 	C$main.c$122$1_0$49 ==.
                                   1145 ;	main.c:122: Tx_Busy = 1;
                                   1146 ;	assignBit
      0001CA D2*00            [12] 1147 	setb	_Tx_Busy
                           0001CC  1148 	C$main.c$123$1_0$49 ==.
                                   1149 ;	main.c:123: SBUF = ACC;                 //写数据到UART数据寄存器	
      0001CC 85 E0 99         [24] 1150 	mov	_SBUF,_ACC
                           0001CF  1151 	C$main.c$124$1_0$49 ==.
                                   1152 ;	main.c:124: }
                           0001CF  1153 	C$main.c$124$1_0$49 ==.
                           0001CF  1154 	XG$Uart_Send$0$0 ==.
      0001CF 22               [24] 1155 	ret
                                   1156 ;------------------------------------------------------------
                                   1157 ;Allocation info for local variables in function 'Uart_Interrupt'
                                   1158 ;------------------------------------------------------------
                           0001D0  1159 	G$Uart_Interrupt$0$0 ==.
                           0001D0  1160 	C$main.c$128$1_0$53 ==.
                                   1161 ;	main.c:128: void Uart_Interrupt() __interrupt(4)
                                   1162 ;	-----------------------------------------
                                   1163 ;	 function Uart_Interrupt
                                   1164 ;	-----------------------------------------
      0001D0                       1165 _Uart_Interrupt:
      0001D0 C0*00            [24] 1166 	push	bits
      0001D2 C0 E0            [24] 1167 	push	acc
      0001D4 C0 F0            [24] 1168 	push	b
      0001D6 C0 82            [24] 1169 	push	dpl
      0001D8 C0 83            [24] 1170 	push	dph
      0001DA C0 07            [24] 1171 	push	(0+7)
      0001DC C0 06            [24] 1172 	push	(0+6)
      0001DE C0 05            [24] 1173 	push	(0+5)
      0001E0 C0 04            [24] 1174 	push	(0+4)
      0001E2 C0 03            [24] 1175 	push	(0+3)
      0001E4 C0 02            [24] 1176 	push	(0+2)
      0001E6 C0 01            [24] 1177 	push	(0+1)
      0001E8 C0 00            [24] 1178 	push	(0+0)
      0001EA C0 D0            [24] 1179 	push	psw
      0001EC 75 D0 00         [24] 1180 	mov	psw,#0x00
                           0001EF  1181 	C$main.c$130$1_0$53 ==.
                                   1182 ;	main.c:130: if(TI)
                           0001EF  1183 	C$main.c$132$2_0$54 ==.
                                   1184 ;	main.c:132: TI=0;
                                   1185 ;	assignBit
      0001EF 10 99 02         [24] 1186 	jbc	_TI,00121$
      0001F2 80 02            [24] 1187 	sjmp	00102$
      0001F4                       1188 00121$:
                           0001F4  1189 	C$main.c$133$2_0$54 ==.
                                   1190 ;	main.c:133: Tx_Busy=0;
                                   1191 ;	assignBit
      0001F4 C2*00            [12] 1192 	clr	_Tx_Busy
      0001F6                       1193 00102$:
                           0001F6  1194 	C$main.c$135$1_0$53 ==.
                                   1195 ;	main.c:135: if(RI)
      0001F6 30 98 4A         [24] 1196 	jnb	_RI,00107$
                           0001F9  1197 	C$main.c$149$2_0$55 ==.
                                   1198 ;	main.c:149: Uart_Receive_Buff[Uart_Receive_Buff_Index++]=SBUF;
      0001F9 78r48            [12] 1199 	mov	r0,#_Uart_Receive_Buff_Index
      0001FB 86 07            [24] 1200 	mov	ar7,@r0
      0001FD 78r48            [12] 1201 	mov	r0,#_Uart_Receive_Buff_Index
      0001FF EF               [12] 1202 	mov	a,r7
      000200 04               [12] 1203 	inc	a
      000201 F6               [12] 1204 	mov	@r0,a
      000202 EF               [12] 1205 	mov	a,r7
      000203 24r08            [12] 1206 	add	a,#_Uart_Receive_Buff
      000205 F8               [12] 1207 	mov	r0,a
      000206 A6 99            [24] 1208 	mov	@r0,_SBUF
                           000208  1209 	C$main.c$150$2_0$55 ==.
                                   1210 ;	main.c:150: if(Uart_Receive_Buff_Index>=sizeof(Uart_Receive_Buff))
      000208 78r48            [12] 1211 	mov	r0,#_Uart_Receive_Buff_Index
      00020A B6 40 00         [24] 1212 	cjne	@r0,#0x40,00123$
      00020D                       1213 00123$:
      00020D 40 10            [24] 1214 	jc	00104$
                           00020F  1215 	C$main.c$152$3_0$56 ==.
                                   1216 ;	main.c:152: On_Uart_Buff_Full(Uart_Receive_Buff,sizeof(Uart_Receive_Buff));
      00020F 75*15 40         [24] 1217 	mov	_On_Uart_Buff_Full_PARM_2,#0x40
      000212 75*16 00         [24] 1218 	mov	(_On_Uart_Buff_Full_PARM_2 + 1),#0x00
      000215 75 82r08         [24] 1219 	mov	dpl,#_Uart_Receive_Buff
      000218 12r02r87         [24] 1220 	lcall	_On_Uart_Buff_Full
                           00021B  1221 	C$main.c$153$3_0$56 ==.
                                   1222 ;	main.c:153: Uart_Receive_Buff_Index=0;
      00021B 78r48            [12] 1223 	mov	r0,#_Uart_Receive_Buff_Index
      00021D 76 00            [12] 1224 	mov	@r0,#0x00
      00021F                       1225 00104$:
                           00021F  1226 	C$main.c$155$2_0$55 ==.
                                   1227 ;	main.c:155: Last_Receive_Tick=systick;
      00021F 78r00            [12] 1228 	mov	r0,#_systick
      000221 79r49            [12] 1229 	mov	r1,#_Last_Receive_Tick
      000223 E6               [12] 1230 	mov	a,@r0
      000224 F7               [12] 1231 	mov	@r1,a
      000225 08               [12] 1232 	inc	r0
      000226 09               [12] 1233 	inc	r1
      000227 E6               [12] 1234 	mov	a,@r0
      000228 F7               [12] 1235 	mov	@r1,a
      000229 08               [12] 1236 	inc	r0
      00022A 09               [12] 1237 	inc	r1
      00022B E6               [12] 1238 	mov	a,@r0
      00022C F7               [12] 1239 	mov	@r1,a
      00022D 08               [12] 1240 	inc	r0
      00022E 09               [12] 1241 	inc	r1
      00022F E6               [12] 1242 	mov	a,@r0
      000230 F7               [12] 1243 	mov	@r1,a
      000231 08               [12] 1244 	inc	r0
      000232 09               [12] 1245 	inc	r1
      000233 E6               [12] 1246 	mov	a,@r0
      000234 F7               [12] 1247 	mov	@r1,a
      000235 08               [12] 1248 	inc	r0
      000236 09               [12] 1249 	inc	r1
      000237 E6               [12] 1250 	mov	a,@r0
      000238 F7               [12] 1251 	mov	@r1,a
      000239 08               [12] 1252 	inc	r0
      00023A 09               [12] 1253 	inc	r1
      00023B E6               [12] 1254 	mov	a,@r0
      00023C F7               [12] 1255 	mov	@r1,a
      00023D 08               [12] 1256 	inc	r0
      00023E 09               [12] 1257 	inc	r1
      00023F E6               [12] 1258 	mov	a,@r0
      000240 F7               [12] 1259 	mov	@r1,a
                           000241  1260 	C$main.c$156$2_0$55 ==.
                                   1261 ;	main.c:156: RI=0;
                                   1262 ;	assignBit
      000241 C2 98            [12] 1263 	clr	_RI
      000243                       1264 00107$:
                           000243  1265 	C$main.c$158$1_0$53 ==.
                                   1266 ;	main.c:158: }
      000243 D0 D0            [24] 1267 	pop	psw
      000245 D0 00            [24] 1268 	pop	(0+0)
      000247 D0 01            [24] 1269 	pop	(0+1)
      000249 D0 02            [24] 1270 	pop	(0+2)
      00024B D0 03            [24] 1271 	pop	(0+3)
      00024D D0 04            [24] 1272 	pop	(0+4)
      00024F D0 05            [24] 1273 	pop	(0+5)
      000251 D0 06            [24] 1274 	pop	(0+6)
      000253 D0 07            [24] 1275 	pop	(0+7)
      000255 D0 83            [24] 1276 	pop	dph
      000257 D0 82            [24] 1277 	pop	dpl
      000259 D0 F0            [24] 1278 	pop	b
      00025B D0 E0            [24] 1279 	pop	acc
      00025D D0*00            [24] 1280 	pop	bits
                           00025F  1281 	C$main.c$158$1_0$53 ==.
                           00025F  1282 	XG$Uart_Interrupt$0$0 ==.
      00025F 32               [24] 1283 	reti
                                   1284 ;------------------------------------------------------------
                                   1285 ;Allocation info for local variables in function 'On_SysTick_Timer'
                                   1286 ;------------------------------------------------------------
                           000260  1287 	G$On_SysTick_Timer$0$0 ==.
                           000260  1288 	C$main.c$161$1_0$57 ==.
                                   1289 ;	main.c:161: void On_SysTick_Timer()//系统的毫秒级定时器
                                   1290 ;	-----------------------------------------
                                   1291 ;	 function On_SysTick_Timer
                                   1292 ;	-----------------------------------------
      000260                       1293 _On_SysTick_Timer:
                           000260  1294 	C$main.c$163$1_0$57 ==.
                                   1295 ;	main.c:163: LS_Refresh();//刷新点阵屏	
      000260 12r00rA3         [24] 1296 	lcall	_LS_Refresh
                           000263  1297 	C$main.c$164$1_0$57 ==.
                                   1298 ;	main.c:164: }
                           000263  1299 	C$main.c$164$1_0$57 ==.
                           000263  1300 	XG$On_SysTick_Timer$0$0 ==.
      000263 22               [24] 1301 	ret
                                   1302 ;------------------------------------------------------------
                                   1303 ;Allocation info for local variables in function 'On_Uart_Idle'
                                   1304 ;------------------------------------------------------------
                                   1305 ;length                    Allocated with name '_On_Uart_Idle_PARM_2'
                                   1306 ;buff                      Allocated to registers r7 
                                   1307 ;i                         Allocated to registers r6 
                                   1308 ;------------------------------------------------------------
                           000264  1309 	G$On_Uart_Idle$0$0 ==.
                           000264  1310 	C$main.c$166$1_0$59 ==.
                                   1311 ;	main.c:166: void On_Uart_Idle(uint8_t __idata * buff,size_t length)//串口空闲的函数
                                   1312 ;	-----------------------------------------
                                   1313 ;	 function On_Uart_Idle
                                   1314 ;	-----------------------------------------
      000264                       1315 _On_Uart_Idle:
      000264 AF 82            [24] 1316 	mov	r7,dpl
                           000266  1317 	C$main.c$168$1_0$59 ==.
                                   1318 ;	main.c:168: if(length==8)//当长度为8时,直接复制数据到8X8点阵显示内存
      000266 74 08            [12] 1319 	mov	a,#0x08
      000268 B5*13 06         [24] 1320 	cjne	a,_On_Uart_Idle_PARM_2,00116$
      00026B E4               [12] 1321 	clr	a
      00026C B5*14 02         [24] 1322 	cjne	a,(_On_Uart_Idle_PARM_2 + 1),00116$
      00026F 80 02            [24] 1323 	sjmp	00117$
      000271                       1324 00116$:
      000271 80 13            [24] 1325 	sjmp	00106$
      000273                       1326 00117$:
                           000273  1327 	C$main.c$171$3_0$61 ==.
                                   1328 ;	main.c:171: for(i=0;i<8;i++)
      000273 7E 00            [12] 1329 	mov	r6,#0x00
      000275                       1330 00104$:
                           000275  1331 	C$main.c$173$4_0$62 ==.
                                   1332 ;	main.c:173: LS_RAM[i]=buff[i];
      000275 EE               [12] 1333 	mov	a,r6
      000276 24r00            [12] 1334 	add	a,#_LS_RAM
      000278 F9               [12] 1335 	mov	r1,a
      000279 EE               [12] 1336 	mov	a,r6
      00027A 2F               [12] 1337 	add	a,r7
      00027B F8               [12] 1338 	mov	r0,a
      00027C 86 05            [24] 1339 	mov	ar5,@r0
      00027E A7 05            [24] 1340 	mov	@r1,ar5
                           000280  1341 	C$main.c$171$3_0$61 ==.
                                   1342 ;	main.c:171: for(i=0;i<8;i++)
      000280 0E               [12] 1343 	inc	r6
      000281 BE 08 00         [24] 1344 	cjne	r6,#0x08,00118$
      000284                       1345 00118$:
      000284 40 EF            [24] 1346 	jc	00104$
      000286                       1347 00106$:
                           000286  1348 	C$main.c$176$1_0$59 ==.
                                   1349 ;	main.c:176: }
                           000286  1350 	C$main.c$176$1_0$59 ==.
                           000286  1351 	XG$On_Uart_Idle$0$0 ==.
      000286 22               [24] 1352 	ret
                                   1353 ;------------------------------------------------------------
                                   1354 ;Allocation info for local variables in function 'On_Uart_Buff_Full'
                                   1355 ;------------------------------------------------------------
                                   1356 ;length                    Allocated with name '_On_Uart_Buff_Full_PARM_2'
                                   1357 ;buff                      Allocated to registers 
                                   1358 ;------------------------------------------------------------
                           000287  1359 	G$On_Uart_Buff_Full$0$0 ==.
                           000287  1360 	C$main.c$177$1_0$64 ==.
                                   1361 ;	main.c:177: void On_Uart_Buff_Full(uint8_t __idata * buff,size_t length)//串口缓冲满
                                   1362 ;	-----------------------------------------
                                   1363 ;	 function On_Uart_Buff_Full
                                   1364 ;	-----------------------------------------
      000287                       1365 _On_Uart_Buff_Full:
                           000287  1366 	C$main.c$180$1_0$64 ==.
                                   1367 ;	main.c:180: UNUSED(length);
                           000287  1368 	C$main.c$182$1_0$64 ==.
                                   1369 ;	main.c:182: }
                           000287  1370 	C$main.c$182$1_0$64 ==.
                           000287  1371 	XG$On_Uart_Buff_Full$0$0 ==.
      000287 22               [24] 1372 	ret
                                   1373 ;------------------------------------------------------------
                                   1374 ;Allocation info for local variables in function 'main'
                                   1375 ;------------------------------------------------------------
                           000288  1376 	G$main$0$0 ==.
                           000288  1377 	C$main.c$184$1_0$65 ==.
                                   1378 ;	main.c:184: void main()
                                   1379 ;	-----------------------------------------
                                   1380 ;	 function main
                                   1381 ;	-----------------------------------------
      000288                       1382 _main:
                           000288  1383 	C$main.c$186$1_0$65 ==.
                                   1384 ;	main.c:186: systick_init();//初始化主时间
      000288 12r00rBC         [24] 1385 	lcall	_systick_init
                           00028B  1386 	C$main.c$187$1_0$65 ==.
                                   1387 ;	main.c:187: Uart_Init();//初始化串口
      00028B 12r01rA4         [24] 1388 	lcall	_Uart_Init
                           00028E  1389 	C$main.c$188$1_0$65 ==.
                                   1390 ;	main.c:188: LS_Init();//初始化点阵屏
      00028E 12r00r00         [24] 1391 	lcall	_LS_Init
                           000291  1392 	C$main.c$190$1_0$65 ==.
                                   1393 ;	main.c:190: while(1)
      000291                       1394 00102$:
      000291 80 FE            [24] 1395 	sjmp	00102$
                           000293  1396 	C$main.c$205$1_0$65 ==.
                                   1397 ;	main.c:205: }
                           000293  1398 	C$main.c$205$1_0$65 ==.
                           000293  1399 	XG$main$0$0 ==.
      000293 22               [24] 1400 	ret
                                   1401 	.area CSEG    (CODE)
                                   1402 	.area CONST   (CODE)
                                   1403 	.area XINIT   (CODE)
                                   1404 	.area CABS    (ABS,CODE)
